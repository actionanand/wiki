"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[8375],{78342:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"js-tips/string-manipulation-3","title":"String/Array Manipulation Part 3","description":"Merge two arrays and sort them in ascending order","source":"@site/docs/js-tips/string-manipulation-3.md","sourceDirName":"js-tips","slug":"/js-tips/string-manipulation-3","permalink":"/wiki/docs/js-tips/string-manipulation-3","draft":false,"unlisted":false,"editUrl":"https://github.com/actionanand/wiki/docs/js-tips/string-manipulation-3.md","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"sidebar_position":12,"sidebar_label":"String Manipulation part-3"},"sidebar":"tutorialSidebar","previous":{"title":"String Manipulation part-2","permalink":"/wiki/docs/js-tips/string-manipulation-2"},"next":{"title":"Decorator in Typescript","permalink":"/wiki/docs/js-tips/decorator"}}');var s=r(74848),i=r(28453);const a={sidebar_position:12,sidebar_label:"String Manipulation part-3"},o="String/Array Manipulation Part 3",l={},c=[{value:"Merge two arrays and sort them in ascending order",id:"merge-two-arrays-and-sort-them-in-ascending-order",level:2},{value:"Remove an element from an array",id:"remove-an-element-from-an-array",level:2},{value:"Second largest element in an array",id:"second-largest-element-in-an-array",level:2},{value:"Largest element in an array",id:"largest-element-in-an-array",level:2},{value:"Reverse the order of words in a string with built-in method",id:"reverse-the-order-of-words-in-a-string-with-built-in-method",level:2},{value:"Reverse the order of words in a string without built-in method",id:"reverse-the-order-of-words-in-a-string-without-built-in-method",level:2},{value:"Largest common prefix among an array of strings",id:"largest-common-prefix-among-an-array-of-strings",level:2},{value:"Example Usage",id:"example-usage",level:3},{value:"Key Points",id:"key-points",level:3},{value:"Intersection of two arrays",id:"intersection-of-two-arrays",level:2},{value:"Fibonacci sequence",id:"fibonacci-sequence",level:2},{value:"Swap two numbers",id:"swap-two-numbers",level:2},{value:"Swap two numbers using a Temporary Variable",id:"swap-two-numbers-using-a-temporary-variable",level:3},{value:"Swap two numbers using Arithmetic Operations",id:"swap-two-numbers-using-arithmetic-operations",level:3},{value:"Swap two numbers using Array Destructuring",id:"swap-two-numbers-using-array-destructuring",level:3},{value:"Swap two numbers  using Binory operator",id:"swap-two-numbers--using-binory-operator",level:3},{value:"Add two complex numbers",id:"add-two-complex-numbers",level:2},{value:"Complex number format",id:"complex-number-format",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"stringarray-manipulation-part-3",children:"String/Array Manipulation Part 3"})}),"\n",(0,s.jsx)(n.h2,{id:"merge-two-arrays-and-sort-them-in-ascending-order",children:"Merge two arrays and sort them in ascending order"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function mergeAndSortArrays(arr1, arr2) {\n  // Merge the two arrays\n  const mergedArray = [...arr1, ...arr2];\n\n  // Sort the merged array in ascending order\n  return mergedArray.sort((a, b) => a - b);\n}\n\n// Example usage\nconsole.log(mergeAndSortArrays([3, 1, 4], [2, 5, 0])); // Output: [0, 1, 2, 3, 4, 5]\nconsole.log(mergeAndSortArrays([10, 20], [5, 15, 25])); // Output: [5, 10, 15, 20, 25]\nconsole.log(mergeAndSortArrays([], [1, 2, 3])); // Output: [1, 2, 3]\nconsole.log(mergeAndSortArrays([7, 8, 9], [])); // Output: [7, 8, 9]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"remove-an-element-from-an-array",children:"Remove an element from an array"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function removeElement(arr, element) {\n  // Filter out the element to be removed\n  return arr.filter(item => item !== element);\n}\n\n// Example usage\nconsole.log(removeElement([1, 2, 3, 4, 5], 3)); // Output: [1, 2, 4, 5]\nconsole.log(removeElement([10, 30, 40], 50)); // Output: [10, 30, 40]\nconsole.log(removeElement([1, 1, 2, 3], 1)); // Output: [2, 3]\nconsole.log(removeElement([], 5)); // Output: []\n"})}),"\n",(0,s.jsx)(n.h2,{id:"second-largest-element-in-an-array",children:"Second largest element in an array"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'function findSecondLargestElement(arr) {\n  if (arr.length < 2) {\n    throw new Error("Array must have at least two elements");\n  }\n\n  // Remove duplicates and sort the array in descending order\n  const uniqueSortedArray = [...new Set(arr)].sort((a, b) => b - a);\n\n  // Return the second largest element\n  return uniqueSortedArray[1];\n}\n\n// Example usage\nconsole.log(findSecondLargestElement([1, 2, 3, 4, 5])); // Output: 4\nconsole.log(findSecondLargestElement([10, 20, 20, 30])); // Output: 20\nconsole.log(findSecondLargestElement([-10, -20, -5, -1])); // Output: -5\nconsole.log(findSecondLargestElement([7, 7, 7, 7])); // Throws an error\n'})}),"\n",(0,s.jsx)(n.h2,{id:"largest-element-in-an-array",children:"Largest element in an array"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'function findLargestElement(arr) {\n  if (arr.length === 0) {\n    throw new Error("Array is empty");\n  }\n\n  return Math.max(...arr); // Use Math.max with the spread operator\n}\n\n// Example usage\nconsole.log(findLargestElement([1, 2, 3, 4, 5])); // Output: 5\nconsole.log(findLargestElement([-10, -20, -5, -1])); // Output: -1\nconsole.log(findLargestElement([100, 50, 200, 150])); // Output: 200\nconsole.log(findLargestElement([7])); // Output: 7\n'})}),"\n",(0,s.jsx)(n.h2,{id:"reverse-the-order-of-words-in-a-string-with-built-in-method",children:"Reverse the order of words in a string with built-in method"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'function reverseWords(str) {\n  // Split the string into an array of words, reverse the array, and join it back into a string\n  return str.split(\' \').reverse().join(\' \');\n}\n\n// Example usage\nconsole.log(reverseWords("Hello World")); // Output: "World Hello"\nconsole.log(reverseWords("JavaScript is fun")); // Output: "fun is JavaScript"\nconsole.log(reverseWords("Reverse these words")); // Output: "words these Reverse"\nconsole.log(reverseWords("SingleWord")); // Output: "SingleWord"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"reverse-the-order-of-words-in-a-string-without-built-in-method",children:"Reverse the order of words in a string without built-in method"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'function reverseWordsWithoutBuiltIn(str) {\n  let words = [];\n  let word = "";\n\n  // Split the string into words manually\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === " ") {\n      if (word) {\n        words.push(word);\n        word = "";\n      }\n    } else {\n      word += str[i];\n    }\n  }\n  if (word) {\n    words.push(word); // Add the last word\n  }\n\n  // Reverse the words array manually\n  let reversed = "";\n  for (let i = words.length - 1; i >= 0; i--) {\n    reversed += words[i];\n    if (i !== 0) {\n      reversed += " ";\n    }\n  }\n\n  return reversed;\n}\n\n// Example usage\nconsole.log(reverseWordsWithoutBuiltIn("Hello World")); // Output: "World Hello"\nconsole.log(reverseWordsWithoutBuiltIn("JavaScript is fun")); // Output: "fun is JavaScript"\nconsole.log(reverseWordsWithoutBuiltIn("Reverse these words")); // Output: "words these Reverse"\nconsole.log(reverseWordsWithoutBuiltIn("SingleWord")); // Output: "SingleWord"\n'})}),"\n",(0,s.jsx)(n.h2,{id:"largest-common-prefix-among-an-array-of-strings",children:"Largest common prefix among an array of strings"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'function findLargestCommonPrefix(strings) {\n  if (strings.length === 0) {\n    return "";\n  }\n\n  // Start with the first string as the prefix\n  let prefix = strings[0]; // flower (first string), i = 0\n\n  for (let i = 1; i < strings.length; i++) {\n    while (strings[i].indexOf(prefix) !== 0) {\n      // Reduce the prefix by removing the last character\n      prefix = prefix.slice(0, -1);\n\n      // If the prefix becomes empty, return an empty string\n      if (prefix === "") {\n        return "";\n      }\n    }\n  }\n\n  return prefix;\n}\n\n// Example usage\nconsole.log(findLargestCommonPrefix(["flower", "flow", "flight"])); // Output: "fl"\nconsole.log(findLargestCommonPrefix(["dog", "racecar", "car"])); // Output: ""\nconsole.log(findLargestCommonPrefix(["interspecies", "interstellar", "interstate"])); // Output: "inters"\nconsole.log(findLargestCommonPrefix(["prefix", "prefixes", "prefixation"])); // Output: "prefix"\nconsole.log(findLargestCommonPrefix([])); // Output: ""\n'})}),"\n",(0,s.jsx)(n.h3,{id:"example-usage",children:"Example Usage"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Input"}),": ",(0,s.jsx)(n.code,{children:'["flower", "flow", "flight"]'})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Initial prefix: ",(0,s.jsx)(n.code,{children:'"flower"'})]}),"\n",(0,s.jsxs)(n.li,{children:["After comparing with ",(0,s.jsx)(n.code,{children:'"flow"'}),", prefix becomes ",(0,s.jsx)(n.code,{children:'"flow"'}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["After comparing with ",(0,s.jsx)(n.code,{children:'"flight"'}),", prefix becomes ",(0,s.jsx)(n.code,{children:'"fl"'}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Output"}),": ",(0,s.jsx)(n.code,{children:'"fl"'})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Input"}),": ",(0,s.jsx)(n.code,{children:'["dog", "racecar", "car"]'})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Initial prefix: ",(0,s.jsx)(n.code,{children:'"dog"'})]}),"\n",(0,s.jsxs)(n.li,{children:["After comparing with ",(0,s.jsx)(n.code,{children:'"racecar"'}),", prefix becomes ",(0,s.jsx)(n.code,{children:'""'})," (no common prefix)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Output"}),": ",(0,s.jsx)(n.code,{children:'""'})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Input"}),": ",(0,s.jsx)(n.code,{children:'["interspecies", "interstellar", "interstate"]'})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Initial prefix: ",(0,s.jsx)(n.code,{children:'"interspecies"'})]}),"\n",(0,s.jsxs)(n.li,{children:["After comparing with ",(0,s.jsx)(n.code,{children:'"interstellar"'}),", prefix becomes ",(0,s.jsx)(n.code,{children:'"inters"'}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["After comparing with ",(0,s.jsx)(n.code,{children:'"interstate"'}),", prefix remains ",(0,s.jsx)(n.code,{children:'"inters"'}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Output"}),": ",(0,s.jsx)(n.code,{children:'"inters"'})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"key-points",children:"Key Points"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The function uses a ",(0,s.jsx)(n.strong,{children:"greedy reduction approach"})," to find the common prefix."]}),"\n",(0,s.jsx)(n.li,{children:"It reduces the prefix character by character until all strings in the array start with the prefix."}),"\n",(0,s.jsx)(n.li,{children:"If no common prefix exists, it returns an empty string."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"intersection-of-two-arrays",children:"Intersection of two arrays"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function findIntersection(arr1, arr2) {\n  // Use a Set to store elements of the first array for quick lookup\n  const set1 = new Set(arr1);\n\n  // Filter elements in the second array that are also in the first array\n  return arr2.filter(item => set1.has(item));\n}\n\n// Example usage\nconsole.log(findIntersection([1, 2, 3, 4], [3, 4, 5, 6])); // Output: [3, 4]\nconsole.log(findIntersection([10, 20, 30], [15, 20, 25])); // Output: [20]\nconsole.log(findIntersection([1, 2, 3], [4, 5, 6])); // Output: []\nconsole.log(findIntersection([], [1, 2, 3])); // Output: []\nconsole.log(findIntersection([1, 1, 2, 2], [2, 2, 3, 3])); // Output: [2, 2]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"fibonacci-sequence",children:"Fibonacci sequence"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:'function generateFibonacciSequence(limit) {\n  if (limit < 0) {\n    throw new Error("Limit must be a non-negative number");\n  }\n\n  const sequence = [0, 1]; // Start with the first two Fibonacci numbers\n\n  while (true) {\n    const nextNumber = sequence[sequence.length - 1] + sequence[sequence.length - 2];\n    if (nextNumber > limit) {\n      break;\n    }\n    sequence.push(nextNumber);\n  }\n\n  return sequence;\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"swap-two-numbers",children:"Swap two numbers"}),"\n",(0,s.jsx)(n.h3,{id:"swap-two-numbers-using-a-temporary-variable",children:"Swap two numbers using a Temporary Variable"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function swapNumbers(a, b) {\n  let temp = a;\n  a = b;\n  b = temp;\n  return [a, b];\n}\n\n// Example usage\nlet [x, y] = swapNumbers(5, 10);\nconsole.log(x, y); // Output: 10, 5\n"})}),"\n",(0,s.jsx)(n.h3,{id:"swap-two-numbers-using-arithmetic-operations",children:"Swap two numbers using Arithmetic Operations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function swapNumbers(a, b) {\n  a = a + b;\n  b = a - b;\n  a = a - b;\n  return [a, b];\n}\n\n// Example usage\nlet [x, y] = swapNumbers(5, 10);\nconsole.log(x, y); // Output: 10, 5\n"})}),"\n",(0,s.jsx)(n.h3,{id:"swap-two-numbers-using-array-destructuring",children:"Swap two numbers using Array Destructuring"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function swapNumbers(a, b) {\n  [a, b] = [b, a];\n  return [a, b];\n}\n\n// Example usage\nlet [x, y] = swapNumbers(5, 10);\nconsole.log(x, y); // Output: 10, 5\n"})}),"\n",(0,s.jsx)(n.h3,{id:"swap-two-numbers--using-binory-operator",children:"Swap two numbers  using Binory operator"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"let a = 5; // Binary: 0101\nlet b = 3; // Binary: 0011\n\n// Swapping using XOR\na = a ^ b; // a becomes 0101 ^ 0011 = 0110 (6 in decimal)\nb = a ^ b; // b becomes 0110 ^ 0011 = 0101 (5 in decimal)\na = a ^ b; // a becomes 0110 ^ 0101 = 0011 (3 in decimal)\n\nconsole.log(`After swapping: a = ${a}, b = ${b}`);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"add-two-complex-numbers",children:"Add two complex numbers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function addComplexNumbers(c1, c2) {\n  return {\n    real: c1.real + c2.real,\n    imaginary: c1.imaginary + c2.imaginary\n  };\n}\n\n// Example usage\nconst complex1 = { real: 3, imaginary: 4 }; // 3 + 4i\nconst complex2 = { real: 1, imaginary: 2 }; // 1 + 2i\n\nconst result = addComplexNumbers(complex1, complex2);\nconsole.log(`${result.real} + ${result.imaginary}i`); // Output: 4 + 6i\n"})}),"\n",(0,s.jsx)(n.h3,{id:"complex-number-format",children:"Complex number format"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"function parseComplexNumber(input) {\n  // Remove spaces and split the input into parts\n  // highlight-next-line\n  const parts = input.replace(/\\s+/g, '').split('+');\n  /*\n  \\s: Matches any whitespace character, including spaces, tabs, and line breaks.\n  +: Matches one or more occurrences of the preceding pattern (\\s in this case).\n  */\n  \n  // Extract the real and imaginary parts\n  const real = parseInt(parts[0]);\n  const imaginary = parseInt(parts[1].replace('i', ''));\n\n  return { real, imaginary };\n}\n\n// Example usage\nconst input = \"3 + 4i\";\nconst result = parseComplexNumber(input);\nconsole.log(result); // Output: { real: 3, imaginary: 4 }\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(96540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);