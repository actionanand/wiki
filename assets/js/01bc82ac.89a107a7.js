"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[5541],{82223:(e,t,n)=>{n.d(t,{A:()=>a});n(96540);var r=n(34164);const s={tabItem:"tabItem_Ymn6"};var i=n(74848);function a(e){let{children:t,hidden:n,className:a}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,a),hidden:n,children:t})}},72206:(e,t,n)=>{n.d(t,{A:()=>w});var r=n(96540),s=n(34164),i=n(80052),a=n(56347),o=n(35793),l=n(99025),c=n(4430),d=n(44148);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:s}}=e;return{value:t,label:n,attributes:r,default:s}}))}(n);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function y(e){let{queryString:t=!1,groupId:n}=e;const s=(0,a.W6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(s.location.search);t.set(i,e),s.replace({...s.location,search:t.toString()})}),[i,s])]}function j(e){const{defaultValue:t,queryString:n=!1,groupId:s}=e,i=p(e),[a,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[c,u]=y({queryString:n,groupId:s}),[j,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,i]=(0,d.Dv)(n);return[s,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:s}),x=(()=>{const e=c??j;return h({value:e,tabValues:i})?e:null})();(0,o.A)((()=>{x&&l(x)}),[x]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),b(e)}),[u,b,i]),tabValues:i}}var b=n(75251);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=n(74848);function g(e){let{className:t,block:n,selectedValue:r,selectValue:a,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.a_)(),d=e=>{const t=e.currentTarget,n=l.indexOf(t),s=o[n].value;s!==r&&(c(t),a(s))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:i}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>{l.push(e)},onKeyDown:u,onClick:d,...i,className:(0,s.A)("tabs__item",x.tabItem,i?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function m(e){let{lazy:t,children:n,selectedValue:i}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==i})))})}function v(e){const t=j(e);return(0,f.jsxs)("div",{className:(0,s.A)("tabs-container",x.tabList),children:[(0,f.jsx)(g,{...t,...e}),(0,f.jsx)(m,{...t,...e})]})}function w(e){const t=(0,b.A)();return(0,f.jsx)(v,{...e,children:u(e.children)},String(t))}},66380:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"js-tips/object-into-array","title":"Object Chain into Array","description":"TypeScript Model","source":"@site/docs/js-tips/object-into-array.mdx","sourceDirName":"js-tips","slug":"/js-tips/object-into-array","permalink":"/wiki/docs/js-tips/object-into-array","draft":false,"unlisted":false,"editUrl":"https://github.com/actionanand/wiki/docs/js-tips/object-into-array.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"sidebar_label":"Obj. Chain into Array"},"sidebar":"tutorialSidebar","previous":{"title":"Array.from()","permalink":"/wiki/docs/js-tips/array-from"},"next":{"title":"JS reduce() in depth","permalink":"/wiki/docs/js-tips/js-reduce"}}');var s=n(74848),i=n(28453),a=n(72206),o=n(82223);const l={sidebar_position:3,sidebar_label:"Obj. Chain into Array"},c="Object Chain into Array",d={},u=[{value:"Explanation",id:"explanation",level:4},{value:"Let see the main logic loop:",id:"let-see-the-main-logic-loop",level:3},{value:"Breakthrough of the above code",id:"breakthrough-of-the-above-code",level:3},{value:"Formatting JSON into desired array in single step",id:"formatting-json-into-desired-array-in-single-step",level:2},{value:"Case Study",id:"case-study",level:2},{value:"<code>Record</code>",id:"record",level:3},{value:"<code>Map</code>",id:"map",level:3},{value:"Key Differences",id:"key-differences",level:3},{value:"Example Use Case",id:"example-use-case",level:3},{value:"Using <code>Record</code>",id:"using-record",level:4},{value:"Using <code>Map</code>",id:"using-map",level:4},{value:"Resources",id:"resources",level:3}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"object-chain-into-array",children:"Object Chain into Array"})}),"\n",(0,s.jsxs)(n,{children:[(0,s.jsx)("summary",{children:"TypeScript Model"}),(0,s.jsx)("div",{children:(0,s.jsxs)(a.A,{className:"unique-tabs",children:[(0,s.jsx)(o.A,{value:"Class",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"showLineNumbers",children:"// `MyPreference` Class\nexport class MyPreference {\n  preferences!: Subscription;\n}\n\n// `Subscription` class\nexport class Subscription {\n  consent!: boolean;\n  email!: string;\n  daily_alert_status!: Status;\n  special_alert_status!: Status;\n  daily!: {\n    // highlight-next-line\n    dual: SubscriptionList;\n    high_priority: SubscriptionList;\n    low_priority: SubscriptionList;\n  };\n  special?: {\n    dual: SubscriptionList;\n    high_priority: SubscriptionList;\n    low_priority: SubscriptionList;\n  };\n}\n"})})}),(0,s.jsx)(o.A,{value:"Interface",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"showLineNumbers",children:"// `SubscriptionList` interface\nexport interface SubscriptionList {\n  filter: string;\n  query: string;\n  type: string;\n  status: boolean;\n}\n\n// `ProcessedList` interface\nexport interface ProcessedList extends SubscriptionList {\n  category: string;\n  subscription: string;\n  unique: string;\n  index: number;\n}\n"})})}),(0,s.jsx)(o.A,{value:"Enum",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"showLineNumbers",children:"// `Status` enum\nexport enum Status {\n  OptedIn = 'OptedIn',\n  OptedOut = 'OptedOut',\n  ConsentNotGivenYet = 'ConsentNotGivenYet',\n}\n"})})})]})})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",metastring:"showLineNumbers",children:"const pref: Subscription = {\n  consent: false,\n  email: 'rajesh@ar.com',\n  daily_alert_status: Status.ConsentNotGivenYet,\n  special_alert_status: Status.OptedIn,\n  daily: {\n    dual: { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: false },\n    high_priority: { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: true },\n    low_priority: { filter: 'utm=facebook', query: '', type: 'standard', status: false },\n  },\n  special: {\n    dual: { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: true },\n    high_priority: { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: false },\n    low_priority: { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: false },\n  },\n};\n"})}),"\n",(0,s.jsxs)(a.A,{className:"unique-tabs",children:[(0,s.jsx)(o.A,{value:"Code",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"/*\n1. \"SubObj\" is a type alias for an object type where the keys are 'dual', 'high_priority', and 'low_priority', and the values are of type \"SubscriptionList\".\n2. Record<'dual' | 'high_priority' | 'low_priority', SubscriptionList> is a utility type that creates an object type with the specified keys and values.\n*/\n\ntype SubObj = Record<'dual' | 'high_priority' | 'low_priority', SubscriptionList>;\ntype SubObjKeys = keyof SubObj; // 'dual' | 'high_priority' | 'low_priority'\n// SubObj and { [key: string]: SubscriptionList } are kind of same data type.\n\nconst arrayVal: [string, { [key: string]: SubscriptionList }][] = Object.entries(pref).filter(val => {\n  return val[0] === 'daily' || val[0] === 'special';\n});\n\n"})})}),(0,s.jsx)(o.A,{value:"Simplified Code",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"/*\n1. Extract the daily and special properties from the pref object.\n2. Create an array with the required structure.\n*/\n\nconst arrayVal: [string, { dual: SubscriptionList; high_priority: SubscriptionList; low_priority: SubscriptionList; }][] = [\n  ['daily', pref.daily],\n  ['special', pref.special!]\n];\n"})})}),(0,s.jsx)(o.A,{value:"Result",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"[\n  [\n    'daily',\n    {\n      dual: SubscriptionList;\n      high_priority: SubscriptionList;\n      low_priority: SubscriptionList;\n    }\n  ],\n  [\n    'special',\n    {\n      dual: SubscriptionList;\n      high_priority: SubscriptionList;\n      low_priority: SubscriptionList;\n    }\n  ]\n]\n"})})}),(0,s.jsx)(o.A,{value:"SubscriptionList Data",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"{ \n  filter: 'utm=facebook', \n  query: 'newsletter', \n  type: 'standard', \n  status: true \n}\n"})})})]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"Object.entries(pref)"})," will give ",(0,s.jsx)(t.code,{children:"['property','value'][] "}),". See the below example."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"[['consent', false], ['email', 'rajesh@ar.com'], ...]\n"})}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Output format is : ",(0,s.jsx)(t.code,{children:"[string, Object][]"}),"."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Here ",(0,s.jsx)(t.code,{children:"Object"})," type is ",(0,s.jsx)(t.code,{children:"Record<'dual' | 'high_priority' | 'low_priority', SubscriptionList>"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Record"})," utility type in TypeScript is used to create an object type with a specific set of keys and a specific type for the values. In the context of ",(0,s.jsx)(t.code,{children:"Record<'dual' | 'high_priority' | 'low_priority', SubscriptionList>"}),", it is used to define an object type where the keys are ",(0,s.jsx)(t.code,{children:"'dual'"}),", ",(0,s.jsx)(t.code,{children:"'high_priority'"}),", and ",(0,s.jsx)(t.code,{children:"'low_priority'"}),", and the values are of type ",(0,s.jsx)(t.code,{children:"SubscriptionList"}),"."]}),"\n",(0,s.jsx)(t.h4,{id:"explanation",children:"Explanation"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsxs)(t.strong,{children:[(0,s.jsx)(t.code,{children:"Record"})," Utility Type"]}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["The ",(0,s.jsx)(t.code,{children:"Record<K, T>"})," utility type constructs an object type whose property keys are ",(0,s.jsx)(t.code,{children:"K"})," and whose property values are ",(0,s.jsx)(t.code,{children:"T"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"Record<'dual' | 'high_priority' | 'low_priority', SubscriptionList>"})}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["This creates an object type with keys ",(0,s.jsx)(t.code,{children:"'dual'"}),", ",(0,s.jsx)(t.code,{children:"'high_priority'"}),", and ",(0,s.jsx)(t.code,{children:"'low_priority'"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["The values for these keys are of type ",(0,s.jsx)(t.code,{children:"SubscriptionList"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"let-see-the-main-logic-loop",children:"Let see the main logic loop:"}),"\n",(0,s.jsxs)(a.A,{children:[(0,s.jsx)(o.A,{value:"Code 1",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"let index = 0;\nconst result: ProcessedList[] = [];\n\narrayVal.forEach(val => {\n  const category = val[0];\n  for (const key in val[1]) {\n    const unique = `${val[0]}_${key}`;\n    const obj: ProcessedList = { category, subscription: key, unique, index: index, ...pref[val[0]][key] };\n    result.push(obj);\n    index++;\n  }\n});\n"})})}),(0,s.jsx)(o.A,{value:"Code 2",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"/*\n1. Iterate over the array of subscription objects.\n2. For each subscription object, iterate over its properties (dual, high_priority, low_priority).\n3. Create a new object for each property with the required structure.\n4. Add these new objects to the result array.\n*/\nconst result: ProcessedList[] = [];\n\nsubscriptions.forEach(([category, subscription], categoryIndex) => {\n  Object.entries(subscription).forEach(([subscriptionKey, subscriptionValue], subscriptionIndex) => {\n    result.push({\n      category,\n      subscription: subscriptionKey,\n      unique: `${category}_${subscriptionKey}`,\n      index: categoryIndex * 3 + subscriptionIndex,\n      ...subscriptionValue\n    });\n  });\n});\n"})})}),(0,s.jsx)(o.A,{value:"Final Result",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:"[\n  {\n    category: 'daily',\n    subscription: 'dual',\n    unique: 'daily_dual',\n    index: 0,\n    filter: 'utm=facebook',\n    query: 'newsletter',\n    type: 'standard',\n    status: false,\n  },\n  {\n    category: 'daily',\n    subscription: 'high_priority',\n    unique: 'daily_high_priority',\n    index: 1,\n    filter: 'utm=facebook',\n    query: 'newsletter',\n    type: 'standard',\n    status: true,\n  },\n  {\n    category: 'daily',\n    subscription: 'low_priority',\n    unique: 'daily_low_priority',\n    index: 2,\n    filter: 'utm=facebook',\n    query: '',\n    type: 'standard',\n    status: false,\n  },\n  {\n    category: 'special',\n    subscription: 'dual',\n    unique: 'special_dual',\n    index: 3,\n    filter: 'utm=facebook',\n    query: 'newsletter',\n    type: 'standard',\n    status: true,\n  },\n  {\n    category: 'special',\n    subscription: 'high_priority',\n    unique: 'special_high_priority',\n    index: 4,\n    filter: 'utm=facebook',\n    query: 'newsletter',\n    type: 'standard',\n    status: false,\n  },\n  {\n    category: 'special',\n    subscription: 'low_priority',\n    unique: 'special_low_priority',\n    index: 5,\n    filter: 'utm=facebook',\n    query: 'newsletter',\n    type: 'standard',\n    status: false,\n  },\n];\n"})})})]}),"\n",(0,s.jsx)(t.h3,{id:"breakthrough-of-the-above-code",children:"Breakthrough of the above code"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"val"})," will iterate over array of ",(0,s.jsx)(t.code,{children:"arrayVal"}),". Here ",(0,s.jsx)(t.code,{children:"arrayVal"})," is like ",(0,s.jsx)(t.code,{children:"[[array1], [array2]]"}),". ",(0,s.jsx)(t.code,{children:"val"})," is either ",(0,s.jsx)(t.code,{children:"array1"})," or ",(0,s.jsx)(t.code,{children:"array2"}),". And inner array has the type of ",(0,s.jsx)(t.code,{children:"[string, Object]"}),", here ",(0,s.jsx)(t.code,{children:"[string, Record<'dual' | 'high_priority' | 'low_priority', SubscriptionList>]"})]}),"\n",(0,s.jsxs)(t.li,{children:["so ",(0,s.jsx)(t.code,{children:"val[0]"})," will be always ",(0,s.jsx)(t.code,{children:"string"}),". And here ",(0,s.jsx)(t.code,{children:"string"})," will be either ",(0,s.jsx)(t.code,{children:"daily"})," or ",(0,s.jsx)(t.code,{children:"special"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["And ",(0,s.jsx)(t.code,{children:"val[1]"})," will be an object, here its type is ",(0,s.jsx)(t.code,{children:"Record<'dual' | 'high_priority' | 'low_priority', SubscriptionList>"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"const key in val[1]"})," will give the array which contains the keys of object. here ",(0,s.jsx)(t.code,{children:"dual"}),", ",(0,s.jsx)(t.code,{children:"high_priority"})," and ",(0,s.jsx)(t.code,{children:"low_priority"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:["So basically here, ",(0,s.jsx)(t.code,{children:"val[0]"})," is one of the keys of object ",(0,s.jsx)(t.code,{children:"pref"})," (its type is ",(0,s.jsx)(t.code,{children:"Subscription"}),") and ",(0,s.jsx)(t.code,{children:"key"})," is one of the keys of the object containing keys ",(0,s.jsx)(t.code,{children:"val[0]"})," (i.e, keys of the object either ",(0,s.jsx)(t.code,{children:"daily"})," or ",(0,s.jsx)(t.code,{children:"special"}),")."]}),"\n",(0,s.jsxs)(t.li,{children:["So refereing both the keys. key of object and key of object's key (inner object) will give the output like this ",(0,s.jsx)(t.code,{children:"{ filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: true }"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"pref[val[0]][key]"})," will be like ",(0,s.jsx)(t.code,{children:"pref['daily']['dual']"})," (this is an example)"]}),"\n",(0,s.jsxs)(t.li,{children:["See the final output as below: The final output type is ",(0,s.jsx)(t.code,{children:"Object[]"}),", here ",(0,s.jsx)(t.code,{children:"ProcessedList[]"})]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"formatting-json-into-desired-array-in-single-step",children:"Formatting JSON into desired array in single step"}),"\n",(0,s.jsx)(t.admonition,{title:"Optimized way & best practice",type:"tip",children:(0,s.jsxs)(a.A,{children:[(0,s.jsx)(o.A,{value:"Optimized Code 1",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"// Convert the 'pref' object to the desired array format (Final Result tab)\n\n/*\n1. Iterate over the daily and special properties of the pref object.\n2. For each property, iterate over its nested properties (dual, high_priority, low_priority).\n3. Create a new object for each nested property with the required structure.\n4. Add these new objects to the result array.\n*/\n\nconst result: ProcessedList[] = [];\n\nlet index = 0;\n\n['daily', 'special'].forEach(category => {\n  const categoryData = pref[category as keyof Subscription];\n  if (categoryData) {\n    Object.entries(categoryData).forEach(([subscription, details]) => {\n      result.push({\n        category,\n        subscription,\n        unique: `${category}_${subscription}`,\n        index: index++,\n        ...details\n      });\n    });\n  }\n});\n\nconsole.log(result);\n"})})}),(0,s.jsx)(o.A,{value:"Optimized Code 2",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"// To convert the pref object into the desired array format without explicitly mentioning ['daily', 'special'],\n// you can dynamically iterate over the properties of the pref object.\n\nconst result: ProcessedList[] = [];\n\nlet index = 0;\n\nObject.entries(pref).forEach(([category, categoryData]) => {\n  if (typeof categoryData === 'object' && categoryData !== null) {\n    Object.entries(categoryData).forEach(([subscription, details]) => {\n      result.push({\n        category,\n        subscription,\n        unique: `${category}_${subscription}`,\n        index: index++,\n        ...details\n      });\n    });\n  }\n});\n\nconsole.log(result);\n"})})}),(0,s.jsx)(o.A,{value:"Using map",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-TypeScript",children:"// Create a new Map to store the daily and special properties\nconst resultMap = new Map<string, { [key: string]: SubscriptionList }>();\n\n// Dynamically add the daily and special properties to the map\nObject.entries(pref).forEach(([key, value]) => {\n  if (typeof value === 'object' && value !== null && key !== 'consent' && key !== 'email' && key !== 'daily_alert_status' && key !== 'special_alert_status') {\n    resultMap.set(key, value as { [key: string]: SubscriptionList });\n  }\n});\n\n// Convert the Map to the desired array format with the required structure\nconst resultArray: ProcessedList[] = [];\nlet index = 0;\n\nresultMap.forEach((subscriptions, category) => {\n  Object.entries(subscriptions).forEach(([subscription, details]) => {\n    resultArray.push({\n      category,\n      subscription,\n      unique: `${category}_${subscription}`,\n      index: index++,\n      ...details\n    });\n  });\n});\n\nconsole.log(resultArray);\n"})})}),(0,s.jsxs)(o.A,{value:"Explanation",children:[(0,s.jsx)(t.p,{children:"Let's assume the category variable is set to 'daily':"}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-TypeScript",children:"const category = 'daily';\nconst categoryData: Subscription = pref[category as keyof Subscription];\nconsole.log(categoryData);\n"})}),(0,s.jsxs)(t.p,{children:["The 'categoryData' will be assigned the value of the 'special' property of the 'pref' object:\nSo, the output of ",(0,s.jsx)(t.code,{children:"console.log(categoryData);"})," will be:"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-TypeScript",children:"{\n  dual: { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: true },\n  high_priority: { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: false },\n  low_priority: { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: false },\n}\n"})}),(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Object.entries(categoryData)"})," will convert the above object into an array of key-value pairs as below:"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-TypeScript",children:"[\n  ['dual', { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: true }],\n  ['high_priority', { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: false }],\n  ['low_priority', { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: false }]\n]\n"})}),(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Object.entries(pref)"})," will convert 'pref' object into an array of key-value pairs as below:"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-TypeScript",children:"[\n  ['consent', false],\n  ['email', 'rajesh@ar.com'],\n  ['daily_alert_status', 'ConsentNotGivenYet'],\n  ['special_alert_status', 'OptedIn'],\n  ['daily', {\n    dual: { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: false },\n    high_priority: { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: true },\n    low_priority: { filter: 'utm=facebook', query: '', type: 'standard', status: false },\n  }],\n  ['special', {\n    dual: { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: true },\n    high_priority: { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: false },\n    low_priority: { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: false },\n  }]\n]\n"})})]})]})}),"\n",(0,s.jsx)(t.h2,{id:"case-study",children:"Case Study"}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Record"})," and ",(0,s.jsx)(t.code,{children:"Map"})," types in TypeScript are both used to represent collections of key-value pairs, but they have different use cases and characteristics. Here is a comparison of ",(0,s.jsx)(t.code,{children:"Record"})," and ",(0,s.jsx)(t.code,{children:"Map"}),":"]}),"\n",(0,s.jsx)(t.h3,{id:"record",children:(0,s.jsx)(t.code,{children:"Record"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Definition"}),": ",(0,s.jsx)(t.code,{children:"Record<K, T>"})," is a utility type that constructs an object type whose property keys are ",(0,s.jsx)(t.code,{children:"K"})," and whose property values are ",(0,s.jsx)(t.code,{children:"T"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Use Case"}),": Use ",(0,s.jsx)(t.code,{children:"Record"})," when you need a simple object with a fixed set of keys and values of a specific type."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Syntax"}),": ",(0,s.jsx)(t.code,{children:"Record<'key1' | 'key2', ValueType>"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Example"}),":"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"interface SubscriptionList {\n  filter: string;\n  query: string;\n  type: string;\n  status: boolean;\n}\n\ntype SubscriptionRecord = Record<'dual' | 'high_priority' | 'low_priority', SubscriptionList>;\n\nconst subscriptions: SubscriptionRecord = {\n  dual: { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: false },\n  high_priority: { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: true },\n  low_priority: { filter: 'utm=facebook', query: '', type: 'standard', status: false },\n};\n"})}),"\n",(0,s.jsx)(t.h3,{id:"map",children:(0,s.jsx)(t.code,{children:"Map"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Definition"}),": ",(0,s.jsx)(t.code,{children:"Map"})," is a built-in JavaScript object that allows you to store key-value pairs and provides methods to manipulate them."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Use Case"}),": Use ",(0,s.jsx)(t.code,{children:"Map"})," when you need a collection of key-value pairs with dynamic keys, or when you need methods to manipulate the collection (e.g., ",(0,s.jsx)(t.code,{children:"set"}),", ",(0,s.jsx)(t.code,{children:"get"}),", ",(0,s.jsx)(t.code,{children:"has"}),", ",(0,s.jsx)(t.code,{children:"delete"}),")."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Syntax"}),": ",(0,s.jsx)(t.code,{children:"Map<KeyType, ValueType>"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Example"}),":"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"interface SubscriptionList {\n  filter: string;\n  query: string;\n  type: string;\n  status: boolean;\n}\n\nconst subscriptions = new Map<string, SubscriptionList>();\n\nsubscriptions.set('dual', { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: false });\nsubscriptions.set('high_priority', { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: true });\nsubscriptions.set('low_priority', { filter: 'utm=facebook', query: '', type: 'standard', status: false });\n\nconsole.log(subscriptions.get('dual'));\n"})}),"\n",(0,s.jsx)(t.h3,{id:"key-differences",children:"Key Differences"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Fixed vs. Dynamic Keys"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Record"})," is used for objects with a fixed set of keys known at compile time."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Map"})," is used for collections with dynamic keys that can be added or removed at runtime."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Methods"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Record"})," is a plain object and does not provide methods for manipulation."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Map"})," provides methods like ",(0,s.jsx)(t.code,{children:"set"}),", ",(0,s.jsx)(t.code,{children:"get"}),", ",(0,s.jsx)(t.code,{children:"has"}),", ",(0,s.jsx)(t.code,{children:"delete"}),", and ",(0,s.jsx)(t.code,{children:"clear"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Iteration"}),":"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Record"})," can be iterated using ",(0,s.jsx)(t.code,{children:"Object.keys"}),", ",(0,s.jsx)(t.code,{children:"Object.values"}),", or ",(0,s.jsx)(t.code,{children:"Object.entries"}),"."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"Map"})," can be iterated directly using ",(0,s.jsx)(t.code,{children:"for...of"})," loops or methods like ",(0,s.jsx)(t.code,{children:"forEach"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"example-use-case",children:"Example Use Case"}),"\n",(0,s.jsxs)(t.p,{children:["Here is an example of how you might use both ",(0,s.jsx)(t.code,{children:"Record"})," and ",(0,s.jsx)(t.code,{children:"Map"})," in a TypeScript project:"]}),"\n",(0,s.jsxs)(t.h4,{id:"using-record",children:["Using ",(0,s.jsx)(t.code,{children:"Record"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"interface SubscriptionList {\n  filter: string;\n  query: string;\n  type: string;\n  status: boolean;\n}\n\ntype SubscriptionRecord = Record<'dual' | 'high_priority' | 'low_priority', SubscriptionList>;\n\nconst subscriptions: SubscriptionRecord = {\n  dual: { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: false },\n  high_priority: { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: true },\n  low_priority: { filter: 'utm=facebook', query: '', type: 'standard', status: false },\n};\n\nconsole.log(subscriptions.dual);\n"})}),"\n",(0,s.jsxs)(t.h4,{id:"using-map",children:["Using ",(0,s.jsx)(t.code,{children:"Map"})]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"interface SubscriptionList {\n  filter: string;\n  query: string;\n  type: string;\n  status: boolean;\n}\n\nconst subscriptions = new Map<string, SubscriptionList>();\n\nsubscriptions.set('dual', { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: false });\nsubscriptions.set('high_priority', { filter: 'utm=facebook', query: 'newsletter', type: 'standard', status: true });\nsubscriptions.set('low_priority', { filter: 'utm=facebook', query: '', type: 'standard', status: false });\n\nsubscriptions.forEach((value, key) => {\n  console.log(`${key}: ${JSON.stringify(value)}`);\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["In summary, use ",(0,s.jsx)(t.code,{children:"Record"})," for simple, fixed key-value pairs and ",(0,s.jsx)(t.code,{children:"Map"})," for dynamic collections with more advanced manipulation needs."]}),"\n",(0,s.jsx)(t.h3,{id:"resources",children:"Resources"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/actionanand/js-helper-code/tree/main/src/obj-array",children:"Object Chain into Array - GitHub"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://bobbyhadz.com/blog/typescript-element-implicitly-has-any-type-expression",children:"Element implicitly has an 'any' type because expression of type 'string' can't be used to index type"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://stackoverflow.com/questions/57086672/element-implicitly-has-an-any-type-because-expression-of-type-string-cant-b",children:"Element implicitly has an 'any' type because expression of type 'string' can't be used to index - stackoverflow"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://blog.logrocket.com/how-to-dynamically-assign-properties-object-typescript/",children:"How to dynamically assign properties to an object in TypeScript"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://stackoverflow.com/questions/59571049/typescript-multiple-object-properties-with-shared-types",children:"Typescript multiple object properties with shared types - stackoverflow"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",children:"Map - mdn"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(96540);const s={},i=r.createContext(s);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);