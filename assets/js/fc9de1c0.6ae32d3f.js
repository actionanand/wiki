"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[3102],{33558:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"js-tips/string-manipulation","title":"String/Array Manipulation","description":"Reverse a String With Built-In Functions","source":"@site/docs/js-tips/string-manipulation.md","sourceDirName":"js-tips","slug":"/js-tips/string-manipulation","permalink":"/wiki/docs/js-tips/string-manipulation","draft":false,"unlisted":false,"editUrl":"https://github.com/actionanand/wiki/docs/js-tips/string-manipulation.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10,"sidebar_label":"String Manipulation part-1"},"sidebar":"tutorialSidebar","previous":{"title":"Support Functions","permalink":"/wiki/docs/js-tips/support-functions"},"next":{"title":"String Manipulation part-2","permalink":"/wiki/docs/js-tips/string-manipulation-2"}}');var i=r(74848),l=r(28453);const t={sidebar_position:10,sidebar_label:"String Manipulation part-1"},c="String/Array Manipulation",o={},a=[{value:"Reverse a String With Built-In Functions",id:"reverse-a-string-with-built-in-functions",level:2},{value:"Reverse a String With a Decrementing For Loop",id:"reverse-a-string-with-a-decrementing-for-loop",level:2},{value:"Reverse a String With Recursion",id:"reverse-a-string-with-recursion",level:2},{value:"Explanation:",id:"explanation",level:3},{value:"Example: <code>reverseString(&quot;hello&quot;)</code>",id:"example-reversestringhello",level:3},{value:"Returning Results:",id:"returning-results",level:3},{value:"Reverse a string using Conditional (Ternary) Operator",id:"reverse-a-string-using-conditional-ternary-operator",level:2},{value:"find a longest word in the string",id:"find-a-longest-word-in-the-string",level:2},{value:"find out if string is palindrome",id:"find-out-if-string-is-palindrome",level:2},{value:"Remove duplicates from an  using <code>set</code>",id:"remove-duplicates-from-an--using-set",level:2},{value:"Remove duplicates from an  using <code>filter</code>",id:"remove-duplicates-from-an--using-filter",level:2},{value:"Remove duplicates from an  using <code>reduce</code>",id:"remove-duplicates-from-an--using-reduce",level:2},{value:"Remove duplicates from an  using <code>forEach</code>",id:"remove-duplicates-from-an--using-foreach",level:2},{value:"Remove duplicates from an  using <code>for loop</code>",id:"remove-duplicates-from-an--using-for-loop",level:2},{value:"check if two strings are Anagrams",id:"check-if-two-strings-are-anagrams",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"stringarray-manipulation",children:"String/Array Manipulation"})}),"\n",(0,i.jsx)(n.h2,{id:"reverse-a-string-with-built-in-functions",children:"Reverse a String With Built-In Functions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function reverseString(str) {\n  return str.split('').reverse().join('');\n}\nreverseString('hello');\n\n// str.split('') -> ['h', 'e', 'l', 'l', 'o']\n"})}),"\n",(0,i.jsx)(n.h2,{id:"reverse-a-string-with-a-decrementing-for-loop",children:"Reverse a String With a Decrementing For Loop"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function reverseString(str) {\n  let newString = '';\n  // iterate from the end\n  for (let i = str.length - 1; i >= 0; i--) {\n    newString += str[i]; // str[0] = 'h'\n  }\n  return newString;\n}\nreverseString('hello');\n"})}),"\n",(0,i.jsx)(n.h2,{id:"reverse-a-string-with-recursion",children:"Reverse a String With Recursion"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function reverseString(str) {\n  if (str === '') // Base case\n    return '';\n  else // Recursive case\n    return reverseString(str.substr(1)) + str.charAt(0);\n}\nreverseString('hello');\n"})}),"\n",(0,i.jsx)(n.h3,{id:"explanation",children:"Explanation:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Base Case"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The function checks if the string ",(0,i.jsx)(n.code,{children:"str"})," is empty (",(0,i.jsx)(n.code,{children:"str === ''"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["If it is empty, it returns an empty string ",(0,i.jsx)(n.code,{children:"''"}),". This is the stopping condition for the recursion."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Recursive Case"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["If the string is not empty, the function:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Calls itself with the substring of ",(0,i.jsx)(n.code,{children:"str"})," starting from the second character (",(0,i.jsx)(n.code,{children:"str.substr(1)"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["Appends the first character of the string (",(0,i.jsx)(n.code,{children:"str.charAt(0)"}),") to the result of the recursive call."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Recursive Breakdown"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The function keeps calling itself with progressively smaller substrings until it reaches the base case (an empty string)."}),"\n",(0,i.jsx)(n.li,{children:"Once the base case is reached, the recursion starts returning and appending characters in reverse order."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"example-reversestringhello",children:["Example: ",(0,i.jsx)(n.code,{children:'reverseString("hello")'})]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Initial call: ",(0,i.jsx)(n.code,{children:'reverseString("hello")'})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"str.substr(1)"})," = ",(0,i.jsx)(n.code,{children:'"ello"'})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"str.charAt(0)"})," = ",(0,i.jsx)(n.code,{children:'"h"'})]}),"\n",(0,i.jsxs)(n.li,{children:["Returns: ",(0,i.jsx)(n.code,{children:'reverseString("ello") + "h"'})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Second call: ",(0,i.jsx)(n.code,{children:'reverseString("ello")'})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"str.substr(1)"})," = ",(0,i.jsx)(n.code,{children:'"llo"'})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"str.charAt(0)"})," = ",(0,i.jsx)(n.code,{children:'"e"'})]}),"\n",(0,i.jsxs)(n.li,{children:["Returns: ",(0,i.jsx)(n.code,{children:'reverseString("llo") + "e"'})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Third call: ",(0,i.jsx)(n.code,{children:'reverseString("llo")'})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"str.substr(1)"})," = ",(0,i.jsx)(n.code,{children:'"lo"'})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"str.charAt(0)"})," = ",(0,i.jsx)(n.code,{children:'"l"'})]}),"\n",(0,i.jsxs)(n.li,{children:["Returns: ",(0,i.jsx)(n.code,{children:'reverseString("lo") + "l"'})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Fourth call: ",(0,i.jsx)(n.code,{children:'reverseString("lo")'})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"str.substr(1)"})," = ",(0,i.jsx)(n.code,{children:'"o"'})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"str.charAt(0)"})," = ",(0,i.jsx)(n.code,{children:'"l"'})]}),"\n",(0,i.jsxs)(n.li,{children:["Returns: ",(0,i.jsx)(n.code,{children:'reverseString("o") + "l"'})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Fifth call: ",(0,i.jsx)(n.code,{children:'reverseString("o")'})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"str.substr(1)"})," = ",(0,i.jsx)(n.code,{children:'""'})," (empty string)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"str.charAt(0)"})," = ",(0,i.jsx)(n.code,{children:'"o"'})]}),"\n",(0,i.jsxs)(n.li,{children:["Returns: ",(0,i.jsx)(n.code,{children:'reverseString("") + "o"'})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Base case: ",(0,i.jsx)(n.code,{children:'reverseString("")'})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Returns: ",(0,i.jsx)(n.code,{children:'""'})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"returning-results",children:"Returning Results:"}),"\n",(0,i.jsx)(n.p,{children:"Till the recursive end, There'll be no output. After the loop is end, characters will be appended from last call to first (because last value will be at top)\nNow, the recursion starts returning values:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'reverseString("")'})," \u2192 ",(0,i.jsx)(n.code,{children:'""'})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'reverseString("o")'})," \u2192 ",(0,i.jsx)(n.code,{children:'"" + "o"'})," \u2192 ",(0,i.jsx)(n.code,{children:'"o"'})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'reverseString("lo")'})," \u2192 ",(0,i.jsx)(n.code,{children:'"o" + "l"'})," \u2192 ",(0,i.jsx)(n.code,{children:'"ol"'})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'reverseString("llo")'})," \u2192 ",(0,i.jsx)(n.code,{children:'"ol" + "l"'})," \u2192 ",(0,i.jsx)(n.code,{children:'"oll"'})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'reverseString("ello")'})," \u2192 ",(0,i.jsx)(n.code,{children:'"oll" + "e"'})," \u2192 ",(0,i.jsx)(n.code,{children:'"olle"'})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'reverseString("hello")'})," \u2192 ",(0,i.jsx)(n.code,{children:'"olle" + "h"'})," \u2192 ",(0,i.jsx)(n.code,{children:'"olleh"'})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"reverse-a-string-using-conditional-ternary-operator",children:"Reverse a string using Conditional (Ternary) Operator"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function reverseString(str) {\n  return (str === '') ? '' : reverseString(str.substr(1)) + str.charAt(0);\n}\nreverseString('hello');\n"})}),"\n",(0,i.jsx)(n.h2,{id:"find-a-longest-word-in-the-string",children:"find a longest word in the string"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'function findLongestWord(str) {\n  const words = str.split(" ");\n  let longestWord = "";\n\n  for (const word of words) {\n    if (word.length > longestWord.length) {\n      longestWord = word;\n    }\n  }\n  return longestWord;\n}\n\nconst sentence = "This is a sample sentence with some long words";\nconst longest = findLongestWord(sentence); // sentence\n'})}),"\n",(0,i.jsx)(n.h2,{id:"find-out-if-string-is-palindrome",children:"find out if string is palindrome"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function isPalindrome(str) {\n  // Remove non-alphanumeric characters and convert to lowercase\n  const cleanedStr = str.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n\n  // Reverse the string\n  const reversedStr = cleanedStr.split('').reverse().join('');\n\n  // Check if the original string is equal to the reversed string\n  return cleanedStr === reversedStr;\n}\n\n// Example usage\nconsole.log(isPalindrome(\"racecar\")); // true\nconsole.log(isPalindrome(\"hello\"));   // false\nconsole.log(isPalindrome(\"A man, a plan, a canal: Panama\")); // true\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"remove-duplicates-from-an--using-set",children:["Remove duplicates from an  using ",(0,i.jsx)(n.code,{children:"set"})]}),"\n",(0,i.jsx)(n.p,{children:"A Set is a collection of unique values. When you pass an array to a Set, it automatically removes duplicates."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function removeDuplicates(arr) {\n  return [...new Set(arr)];\n}\n\n// Example usage\nconst array = [1, 2, 2, 3, 4, 4, 5];\nconst uniqueArray = removeDuplicates(array);\nconsole.log(uniqueArray); // Output: [1, 2, 3, 4, 5]\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"remove-duplicates-from-an--using-filter",children:["Remove duplicates from an  using ",(0,i.jsx)(n.code,{children:"filter"})]}),"\n",(0,i.jsx)(n.p,{children:"By checking if the index of an element is the same as its first occurrence, duplicates can be filtered out."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const array = [1, 2, 2, 3, 4, 4, 5];\nconst uniqueArray = array.filter((item, index) => array.indexOf(item) === index);\n// uniqueArray is now [1, 2, 3, 4, 5]\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"remove-duplicates-from-an--using-reduce",children:["Remove duplicates from an  using ",(0,i.jsx)(n.code,{children:"reduce"})]}),"\n",(0,i.jsx)(n.p,{children:"The reduce method executes a reducer function on each element of the array, resulting in a single output value. It can be used to build a new array containing only unique elements."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const array = [1, 2, 2, 3, 4, 4, 5];\nconst uniqueArray = array.reduce((acc, item) => {\n  if (!acc.includes(item)) {\n    acc.push(item);\n  }\n  return acc;\n}, []);\n// uniqueArray is now [1, 2, 3, 4, 5]\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"remove-duplicates-from-an--using-foreach",children:["Remove duplicates from an  using ",(0,i.jsx)(n.code,{children:"forEach"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const array = [1, 2, 2, 3, 4, 4, 5];\nconst uniqueArray = [];\narray.forEach(item => {\n  if (!uniqueArray.includes(item)) {\n    uniqueArray.push(item);\n  }\n});\n// uniqueArray is now [1, 2, 3, 4, 5]\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"remove-duplicates-from-an--using-for-loop",children:["Remove duplicates from an  using ",(0,i.jsx)(n.code,{children:"for loop"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"function removeDuplicates(arr) {\n  const uniqueArray = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (uniqueArray.indexOf(arr[i]) === -1) {\n      uniqueArray.push(arr[i]);\n    }\n  }\n  return uniqueArray;\n}\n\nconst originalArray = [1, 2, 2, 3, 4, 4, 5];\nconst newArray = removeDuplicates(originalArray);\nconsole.log(newArray); // Output: [1, 2, 3, 4, 5]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"check-if-two-strings-are-anagrams",children:"check if two strings are Anagrams"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'function areAnagrams(str1, str2) {\n  // Remove non-alphanumeric characters, convert to lowercase, and sort the characters\n  const formatString = (str) =>\n    str.replace(/[^a-zA-Z0-9]/g, \'\').toLowerCase().split(\'\').sort().join(\'\');\n\n  // Format both strings and compare\n  return formatString(str1) === formatString(str2);\n}\n\n// Example usage\nconsole.log(areAnagrams("listen", "silent")); // true\nconsole.log(areAnagrams("hello", "world"));   // false\nconsole.log(areAnagrams("Astronomer", "Moon starer")); // true\nconsole.log(areAnagrams("School master", "The classroom")); // true\n'})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>c});var s=r(96540);const i={},l=s.createContext(i);function t(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);