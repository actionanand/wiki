"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[9971],{36359:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"js-tips/string-manipulation-2","title":"String/Array Manipulation Part 2","description":"count the vowels in a string using regex","source":"@site/docs/js-tips/string-manipulation-2.md","sourceDirName":"js-tips","slug":"/js-tips/string-manipulation-2","permalink":"/wiki/docs/js-tips/string-manipulation-2","draft":false,"unlisted":false,"editUrl":"https://github.com/actionanand/wiki/docs/js-tips/string-manipulation-2.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11,"sidebar_label":"String Manipulation part-2"},"sidebar":"tutorialSidebar","previous":{"title":"String Manipulation part-1","permalink":"/wiki/docs/js-tips/string-manipulation"},"next":{"title":"String Manipulation part-3","permalink":"/wiki/docs/js-tips/string-manipulation-3"}}');var t=r(74848),i=r(28453);const o={sidebar_position:11,sidebar_label:"String Manipulation part-2"},a="String/Array Manipulation Part 2",l={},u=[{value:"count the vowels in a string using <code>regex</code>",id:"count-the-vowels-in-a-string-using-regex",level:2},{value:"count the vowels in a string using <code>for of</code>",id:"count-the-vowels-in-a-string-using-for-of",level:2},{value:"Largest number in an array",id:"largest-number-in-an-array",level:2},{value:"Prime number or not",id:"prime-number-or-not",level:2},{value:"Factorial",id:"factorial",level:2},{value:"Factorial using Recursive method",id:"factorial-using-recursive-method",level:2},{value:"Remove whitespace from a string",id:"remove-whitespace-from-a-string",level:2},{value:"Sum of all elements in an array using <code>for loop</code>",id:"sum-of-all-elements-in-an-array-using-for-loop",level:2},{value:"Sum of all elements in an array using <code>reduce</code>",id:"sum-of-all-elements-in-an-array-using-reduce",level:2},{value:"Sorting in ascending order",id:"sorting-in-ascending-order",level:2},{value:"Sorting in descending order",id:"sorting-in-descending-order",level:2},{value:"Sorting using <strong>Bubble Sort</strong>",id:"sorting-using-bubble-sort",level:2},{value:"Explanation:",id:"explanation",level:3},{value:"Array is sorted in ascending or not",id:"array-is-sorted-in-ascending-or-not",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"stringarray-manipulation-part-2",children:"String/Array Manipulation Part 2"})}),"\n",(0,t.jsxs)(e.h2,{id:"count-the-vowels-in-a-string-using-regex",children:["count the vowels in a string using ",(0,t.jsx)(e.code,{children:"regex"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:'function countVowels(str) {\n  // Define a regular expression to match vowels (case-insensitive)\n  const vowels = /[aeiou]/gi;\n\n  // Match the vowels in the string and return the count\n  const matches = str.match(vowels);\n  return matches ? matches.length : 0; // If no vowels, return 0\n}\n\n// Example usage\nconsole.log(countVowels("hello")); // Output: 2\nconsole.log(countVowels("world")); // Output: 1\nconsole.log(countVowels("Cortellis CDX")); // Output: 4\nconsole.log(countVowels("rhythm")); // Output: 0\n'})}),"\n",(0,t.jsxs)(e.h2,{id:"count-the-vowels-in-a-string-using-for-of",children:["count the vowels in a string using ",(0,t.jsx)(e.code,{children:"for of"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:'function countVowels(str) {\n  // Define a set of vowels\n  const vowels = "aeiouAEIOU";\n  let count = 0;\n\n  // Loop through each character in the string using for...of\n  for (const char of str) {\n    if (vowels.includes(char)) {\n      count++; // Increment the count if the character is a vowel\n    }\n  }\n\n  return count;\n}\n\n// Example usage\nconsole.log(countVowels("hello")); // Output: 2\nconsole.log(countVowels("world")); // Output: 1\nconsole.log(countVowels("Cortellis CDX")); // Output: 4\nconsole.log(countVowels("rhythm")); // Output: 0\n'})}),"\n",(0,t.jsx)(e.h2,{id:"largest-number-in-an-array",children:"Largest number in an array"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:'function findLargestNumber(arr) {\n  if (arr.length === 0) {\n    throw new Error("Array is empty");\n  }\n\n  let largest = arr[0]; // Assume the first element is the largest\n\n  for (const num of arr) {\n    if (num > largest) {\n      largest = num; // Update largest if a bigger number is found\n    }\n  }\n\n  return largest;\n}\n\n// Example usage\nconsole.log(findLargestNumber([1, 2, 3, 4, 5])); // Output: 5\nconsole.log(findLargestNumber([-10, -20, -5, -1])); // Output: -1\nconsole.log(findLargestNumber([100, 50, 200, 150])); // Output: 200\n'})}),"\n",(0,t.jsx)(e.h2,{id:"prime-number-or-not",children:"Prime number or not"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"function isPrime(num) {\n  // Numbers less than or equal to 1 are not prime\n  if (num <= 1) {\n    return false;\n  }\n\n  // Check divisors from 2 to the square root of the number\n  for (let i = 2; i * i <= num; i++) {\n    if (num % i === 0) {\n      return false; // If divisible, it's not a prime number\n    }\n  }\n\n  return true; // If no divisors are found, it's a prime number\n}\n\n// Example usage\nconsole.log(isPrime(2));  // Output: true\nconsole.log(isPrime(11)); // Output: true\nconsole.log(isPrime(15)); // Output: false\n"})}),"\n",(0,t.jsx)(e.h2,{id:"factorial",children:"Factorial"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:'function factorial(num) {\n  if (num < 0) {\n    return "Factorial is not defined for negative numbers.";\n  }\n\n  let result = 1;\n  for (let i = 1; i <= num; i++) {\n    result *= i; // Multiply result by the current number\n  }\n\n  return result;\n}\n\n// Example usage\nconsole.log(factorial(5)); // Output: 120\nconsole.log(factorial(0)); // Output: 1\nconsole.log(factorial(-3)); // Output: "Factorial is not defined for negative numbers."\n'})}),"\n",(0,t.jsx)(e.h2,{id:"factorial-using-recursive-method",children:"Factorial using Recursive method"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:'function factorial(num) {\n  if (num < 0) {\n    return "Factorial is not defined for negative numbers.";\n  }\n  if (num === 0 || num === 1) {\n    return 1; // Base case: factorial of 0 or 1 is 1\n  }\n  return num * factorial(num - 1); // Recursive case\n}\n\n// Example usage\nconsole.log(factorial(5)); // Output: 120\nconsole.log(factorial(0)); // Output: 1\nconsole.log(factorial(-3)); // Output: "Factorial is not defined for negative numbers."\n'})}),"\n",(0,t.jsx)(e.h2,{id:"remove-whitespace-from-a-string",children:"Remove whitespace from a string"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:'function removeWhitespace(str) {\n  return str.replace(/\\s+/g, \'\'); // Replace all whitespace characters with an empty string\n}\n\n// \\s: Matches any whitespace character (spaces, tabs, newlines).\n// +: Matches one or more consecutive whitespace characters.\n\n// Example usage\nconsole.log(removeWhitespace("Hello World")); // Output: "HelloWorld"\nconsole.log(removeWhitespace("  JavaScript   is   fun  ")); // Output: "JavaScriptisfun"\nconsole.log(removeWhitespace("NoSpacesHere")); // Output: "NoSpacesHere"\n'})}),"\n",(0,t.jsxs)(e.h2,{id:"sum-of-all-elements-in-an-array-using-for-loop",children:["Sum of all elements in an array using ",(0,t.jsx)(e.code,{children:"for loop"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"function sumArray(arr) {\n  let sum = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]; // Add each element to the sum\n  }\n\n  const avg = sum / arr.length; // average\n  return sum;\n}\n\n// Example usage\nconsole.log(sumArray([1, 2, 3, 4, 5])); // Output: 15\nconsole.log(sumArray([-1, -2, -3, -4, -5])); // Output: -15\nconsole.log(sumArray([])); // Output: 0\n"})}),"\n",(0,t.jsxs)(e.h2,{id:"sum-of-all-elements-in-an-array-using-reduce",children:["Sum of all elements in an array using ",(0,t.jsx)(e.code,{children:"reduce"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"function sumArray(arr) {\n  return arr.reduce((acc, num) => acc + num, 0); // Accumulate the sum starting from 0\n}\n\n// Example usage\nconsole.log(sumArray([1, 2, 3, 4, 5])); // Output: 15\nconsole.log(sumArray([-1, -2, -3, -4, -5])); // Output: -15\nconsole.log(sumArray([])); // Output: 0\n"})}),"\n",(0,t.jsx)(e.h2,{id:"sorting-in-ascending-order",children:"Sorting in ascending order"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"function sortNumbersAscending(arr) {\n  return arr.sort((a, b) => a - b); // Compare numbers for ascending order\n}\n\n// Example usage\nconsole.log(sortNumbersAscending([5, 2, 9, 1, 7])); // Output: [1, 2, 5, 7, 9]\n\n/*\nBy default, the sort() method converts elements to strings and sorts them lexicographically (alphabetically).\nif (a-b) is +ve, then swap.\nif -ve or 0, then no swap\n*/\n"})}),"\n",(0,t.jsx)(e.h2,{id:"sorting-in-descending-order",children:"Sorting in descending order"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"function sortNumbersDescending(arr) {\n  return arr.sort((a, b) => b - a); // Compare numbers for descending order\n}\n\n// Example usage\nconsole.log(sortNumbersDescending([5, 2, 9, 1, 7])); // Output: [9, 7, 5, 2, 1]\n"})}),"\n",(0,t.jsxs)(e.h2,{id:"sorting-using-bubble-sort",children:["Sorting using ",(0,t.jsx)(e.strong,{children:"Bubble Sort"})]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"function bubbleSort(arr) {\n  const n = arr.length;\n\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        // Swap arr[j] and arr[j + 1]\n        const temp = arr[j];\n        arr[j] = arr[j + 1];\n        arr[j + 1] = temp;\n      }\n    }\n  }\n\n  return arr;\n}\n\n// Example usage\nconsole.log(bubbleSort([5, 2, 9, 1, 7])); // Output: [1, 2, 5, 7, 9]\nconsole.log(bubbleSort([10, -1, 2, 8, 0])); // Output: [-1, 0, 2, 8, 10]\n"})}),"\n",(0,t.jsx)(e.h3,{id:"explanation",children:"Explanation:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Outer Loop"}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Runs ",(0,t.jsx)(e.code,{children:"n - 1"})," times, where ",(0,t.jsx)(e.code,{children:"n"})," is the length of the array."]}),"\n",(0,t.jsx)(e.li,{children:'Ensures that the largest unsorted element "bubbles up" to its correct position in each iteration.'}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Inner Loop"}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Compares adjacent elements (",(0,t.jsx)(e.code,{children:"arr[j]"})," and ",(0,t.jsx)(e.code,{children:"arr[j + 1]"}),")."]}),"\n",(0,t.jsx)(e.li,{children:"If the current element is greater than the next element, they are swapped."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Swapping"}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["A temporary variable (",(0,t.jsx)(e.code,{children:"temp"}),") is used to swap the values of ",(0,t.jsx)(e.code,{children:"arr[j]"})," and ",(0,t.jsx)(e.code,{children:"arr[j + 1]"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Sorted Array"}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"After all iterations, the array is sorted in ascending order."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"array-is-sorted-in-ascending-or-not",children:"Array is sorted in ascending or not"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-js",children:"function isSortedAscending(arr) {\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      return false; // If any element is greater than the next, it's not sorted\n    }\n  }\n  return true; // If no such element is found, the array is sorted\n}\n\n// Example usage\nconsole.log(isSortedAscending([1, 2, 3, 4, 5])); // Output: true\nconsole.log(isSortedAscending([5, 3, 2, 1]));    // Output: false\nconsole.log(isSortedAscending([1, 2, 2, 3]));    // Output: true\nconsole.log(isSortedAscending([]));              // Output: true (empty array is considered sorted)\nconsole.log(isSortedAscending([10]));            // Output: true (single-element array is sorted)\n"})})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},28453:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>a});var s=r(96540);const t={},i=s.createContext(t);function o(n){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);