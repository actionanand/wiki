"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[4488],{8424:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"wsl2-and-cisco-vpn-issue-fix","metadata":{"permalink":"/wiki/blog/wsl2-and-cisco-vpn-issue-fix","editUrl":"https://github.com/actionanand/wiki/blog/2024-02-12-wsl2-vpn-issue-fix.md","source":"@site/blog/2024-02-12-wsl2-vpn-issue-fix.md","title":"How to fix WSL2 & VPN issue","description":"How to fix WSL2 and Cisco Anyconnect VPN internet issue.","date":"2024-02-12T00:00:00.000Z","formattedDate":"February 12, 2024","tags":[{"label":"wsl","permalink":"/wiki/blog/tags/wsl"},{"label":"wsl2","permalink":"/wiki/blog/tags/wsl-2"},{"label":"vpn","permalink":"/wiki/blog/tags/vpn"}],"readingTime":5.08,"hasTruncateMarker":true,"authors":[{"name":"Anand Raja","title":"Software Developer","url":"https://github.com/actionanand","imageURL":"https://github.com/actionanand.png","key":"anand"}],"frontMatter":{"slug":"wsl2-and-cisco-vpn-issue-fix","title":"How to fix WSL2 & VPN issue","authors":"anand","tags":["wsl","wsl2","vpn"],"sidebar_label":"Sassy CSS 2"},"unlisted":false,"nextItem":{"title":"JS Regex Helper","permalink":"/wiki/blog/js-regex-helper"}},"content":"> How to fix WSL2 and Cisco Anyconnect VPN internet issue.\\n\\n### The problem - some samples\\n\\n* `sudo apt update` will display something similar below:\\n\\n```bash showLineNumbers\\nErr:1 http://archive.ubuntu.com/ubuntu focal-updates InRelease\\n  Temporary failure resolving \'archive.ubuntu.com\'\\nErr:2 http://archive.ubuntu.com/ubuntu focal-backports InRelease\\n  Temporary failure resolving \'archive.ubuntu.com\'\\nReading package lists... Done\\nW: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/focal/InRelease  Temporary failure   resolving \'archive.ubuntu.com\'\\nW: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/focal-updates/InRelease  Temporary   failure resolving \'archive.ubuntu.com\'\\n```\\n\\n* `git pull` will display something similar below:\\n\\n```bash\\n// code-block-error-line\\nfatal: unable to access \'https://github.com/actionanand/wiki.git/\': Could not resolve host: github.com\\n```\\n\\n* `ping google.com` will display something similar below:\\n\\n```bash\\nping: google.com: Temporary failure in name resolution\\n```\\n\x3c!--truncate--\x3e\\n\\nTrying `sudo apt update`, `ping google.com`, `git pull`, etc on `wsl2` will fail when connected to Cisco Anyconnect VPN but without vpn it works fine. The problem is when you are connected to anyconnect(vpn), wsl fails to resolve the DNS.\\n\\n## The solution\\n\\nInternet connection and DNS routing are broken from WSL2 instances, when some VPNs are active. The workaround breaks down into two steps:\\n\\n### DNS Resolution\\n\\n1. Having the Cisco Anyconnect VPN connected, you\'ve to kick start powershell as Admin. Then fire the following commands to get all the available DNS/nameservers. Kindly take these DNS/nameservers down as we need them in later stage.\\n\\n```powershell\\nGet-DnsClientServerAddress -AddressFamily IPv4 | Select-Object -ExpandProperty ServerAddresses\\n```\\n\\n2. Next you can fire the folowing commands to get all the available search domains that will be needed later with the nameservers above.\\n\\n```powershell\\nGet-DnsClientGlobalSetting | Select-Object -ExpandProperty SuffixSearchList\\n```\\n\\n3. When the VPN is active, the autogenerated `/etc/resolv.conf` does not work. So the list of nameservers must be manually built to include some default DNS Name Servers and the DNS from the VPN.\\n\\nFirst, disable automatically generating `/etc/resolv.conf`. And proceed in `wsl2` as described below:\\n\\n```bash\\n  sudo unlink /etc/resolv.conf # this will unlink the default wsl2 resolv.conf\\n```\\n\\n```bash title=\'/etc/resolv.conf\'\\n  # This config will prevent wsl2 from overwritting the resolve.conf file everytime you start wsl2\\n  cat <<EOF | sudo tee -a /etc/wsl.conf\\n  [network]\\n  generateResolvConf = false\\n  EOF\\n```\\n\\nNext, manually add the corportate DNS Server as the first `nameserver` in `/etc/resolv.conf`.\\n\\n```bash title=\'/etc/resolv.conf\'\\ncat <<EOF | sudo tee -a /etc/resolv.conf\\nnameserver 10.50... # The company DNS/nameserver from the command in step 1\\nnameserver 10.50... # The company DNS/nameserver from the command in step 1\\nnameserver 8.8.8.8\\nnameserver 8.8.4.4\\nsearch this.searchdomain.com # The search domain that we got from step 2\\nEOF\\n```\\n\\n4. To prevent the system from re-writing your `/etc/resolv.conf` on startup of wsl, fire the below command in `wsl2`\\n\\n```bash\\nsudo chattr +i /etc/resolv.conf\\n```\\n\\n5. For extra information\\n\\nTo get `<corporateDNS>` addresses, use `ipconfig /all` from `CMD` or `Powershell` prompt, and check the details of the VPN adapter:\\n\\n```powershell\\nDescription . . . . . . . . . . . : Cisco AnyConnect Secure Mobility Client Virtual Miniport Adapter for Windows x64\\nPhysical Address. . . . . . . . . : XX-XX-XX-XX-XX-XX\\nDHCP Enabled. . . . . . . . . . . : No\\nAutoconfiguration Enabled . . . . : Yes\\nIPv6 Address. . . . . . . . . . . : xxxx:xxxx:xxxx:xxxx(Preferred)\\nLink-local IPv6 Address . . . . . : xxxx:xxxx:xxxx:xxxx(Preferred)\\nIPv4 Address. . . . . . . . . . . : 10.20.30.40(Preferred)\\nSubnet Mask . . . . . . . . . . . : 255.255.255.255\\nDefault Gateway . . . . . . . . . : ::\\n                                    0.0.0.0\\nDHCPv6 IAID . . . . . . . . . . . :\\nDHCPv6 Client DUID. . . . . . . . : \\nDNS Servers . . . . . . . . . . . : 123.45.67.89    <- Corporate DNS 1\\n                                    123.45.67.90    <- Corporate DNS 2\\nPrimary WINS Server . . . . . . . : xxx.xx.xxx.xx\\nNetBIOS over Tcpip. . . . . . . . : Enabled\\n```\\n\\n### Network connection\\n\\nWhen the VPN connection is active, network traffic out of WSL2 is not passed to the internet.\\n\\n> Changing the Interface Metric 1 -> 6000 for AnyConnect VPN Adapter will resolve the connection issue. And  this has to be done each time after the VPN connection established.\\n\\nBy default, the Interface Metrics for AnyConnect are:\\n- IPv6: 6000\\n- IPv4: 1\\n\\n`ping` times out from WSL Shell.\\n\\nChanging the Interface Metrics as 600 for AnyConnect will reflect as below:\\n- IPv6: 6000\\n- IPv4: 6000\\n\\n1. To chnage **Interface Metric 1 -> 6000**, fire the below command in powershell\\n\\n```powershell\\nGet-NetAdapter | Where-Object {$_.InterfaceDescription -Match \\"Cisco AnyConnect\\"} | Set-NetIPInterface -InterfaceMetric 6000\\n```\\n:::tip\\nPS: The above command in powershell with admin rights, has to be fired each time after the VPN connection established\\n:::\\n\\n2. Optional: \\n\\nRestart the `wsl2` from powershell using the below command or close the wsl2 window and reopen it.\\n\\n```powershell\\nRestart-Service LxssManager\\n```\\n\\n* [For more ...](https://gist.github.com/machuu/7663aa653828d81efbc2aaad6e3b1431)\\n\\n## Bonus\\n\\n### Not able to download RAW files too?\\n\\n```bash\\nwget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh\\n--2022-12-28 13:02:52-- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh\\nResolving raw.githubusercontent.com (raw.githubusercontent.com)\u2026 49.44.79.236, 2405:200:1607:2820:41::36\\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|49.44.79.236|:443\u2026 failed: Connection timed out.\\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|2405:200:1607:2820:41::36|:443\u2026 failed: Network is unreachable.\\n```\\n\\nIf you are in India and using the Jio network, you may face this as well because the ISP blocks the `raw.githubusercontent.com` at the DNS level for some unknown reason!\\n\\n\\n* Updating the `/etc/hosts` file in Linux & Windows or changing DNS or connecting to vpn will resolve the issue. Here we can see about updating `hosts` file.\\n\\n1. For windows, Open `notepad` with admin, then click `file -> open` (`ctr+o`) and navigate to path **%SystemRoot%\\\\System32\\\\drivers\\\\etc\\\\hosts**\\n\\n```bash\\nC:\\\\System32\\\\drivers\\\\etc\\\\hosts\\n```\\n\\nThen, at the end of this file, add the IP address and the domain name as below:\\n\\n```bash\\n185.199.110.133 raw.githubusercontent.com\\n```\\n\\nOpen the `/etc/hosts` file via nano or any editor in linux and mac and add the above code.\\n\\n```bash\\nsudo nano /etc/hosts\\n```\\n\\n### Some WSL commands for powershell\\n\\n1. Checking wsl version\\n\\n```powershell\\nwsl -l -v\\n```\\n\\n2. If version shows as 1 then, use the below command to switch as 2\\n\\n```powershell\\nwsl --set-version <Ubuntu-distro-name> 2\\n```"},{"id":"js-regex-helper","metadata":{"permalink":"/wiki/blog/js-regex-helper","editUrl":"https://github.com/actionanand/wiki/blog/2024-02-09-js-regex-helper.mdx","source":"@site/blog/2024-02-09-js-regex-helper.mdx","title":"JS Regex Helper","description":"Regex - short Regular Expression","date":"2024-02-09T00:00:00.000Z","formattedDate":"February 9, 2024","tags":[{"label":"regex","permalink":"/wiki/blog/tags/regex"}],"readingTime":9.06,"hasTruncateMarker":true,"authors":[{"name":"Anand Techie","title":"Software Developer, Frontend","url":"https://github.com/AnandRaja-tech","imageURL":"https://github.com/AnandRaja-tech.png","key":"anand-tech"}],"frontMatter":{"slug":"js-regex-helper","title":"JS Regex Helper","authors":"anand-tech","description":"Regex - short Regular Expression","tags":["regex"]},"unlisted":false,"prevItem":{"title":"How to fix WSL2 & VPN issue","permalink":"/wiki/blog/wsl2-and-cisco-vpn-issue-fix"},"nextItem":{"title":"Which came first?","permalink":"/wiki/blog/the-chicken-or-the-egg"}},"content":"import Highlight from \'@site/src/components/Highlight\';\\n\\nA <Highlight color=\'#25c2a0\'> regular expression </Highlight>, also known as <Highlight color=\'#1877F2\'> regex </Highlight> or <Highlight color=\'#1877F2\'> regexp </Highlight>, is a sequence of characters that define a search pattern. It can be used to search, edit, or manipulate text and data.\\n\\nIn JavaScript, regular expressions are created using the <Highlight color=\'#ff1b68\'> RegExp object </Highlight>. The RegExp object has a number of methods that can be used to search for and manipulate strings.\\n\\nHere are some examples of regular expressions in JavaScript:\\n\\n```js showLineNumbers\\n// Find all occurrences of the letter \\"a\\" in a string\\nconst regex = /a/g;\\nconst string = \\"This is a string.\\";\\nconst matches = regex.exec(string);\\n\\n// Replace all occurrences of the letter \\"a\\" with the letter \\"e\\" in a string\\nconst regex = /a/g;\\nconst string = \\"This is a string.\\";\\nconst newString = string.replace(regex, \\"e\\");\\n\\n// Check if a string contains a particular pattern\\nconst regex = /^abc/g;\\nconst string = \\"abc123\\";\\nconst match = regex.test(string);\\n```\\n\\n\x3c!--truncate--\x3e\\n\\n\\n> <Highlight color=\'#25c2a0\'> Regex </Highlight> short Regular Expression\\n\\n### 1. General view\\n\\n  - Expressions need to be surrounded by forward slashes - Eg. `/expression/`\\n\\n### 2. Modes or Flags in regex\\n\\n  - Standard - `/expression/`\\n  - Case-insensitive - `/expression/i`\\n\\n    - With this flag the search is case-insensitive: no difference between **A** and **a**\\n\\n  - Dot-matches-all - `/expression/s`\\n\\n    - Enables **dotall** mode, that allows a dot `.` to match newline character `\\\\n`\\n\\n    - By default, a dot doesn\u2019t match the newline character `\\\\n`.\\n\\n    - For instance, the regexp `A.B` matches A, and then B with any character between them, except a newline `\\\\n`\\n\\n    ```js\\n    alert(\'A\\\\nB\'.match(/A.B/)); // null (no match)\\n    ```\\n\\n    - There are many situations when we\u2019d like a dot to mean literally **any character**, newline included.\\n\\n    - That\u2019s what flag `s` does. If a regexp has it, then a dot `.` matches literally any character:\\n\\n    ```js\\n    alert(\'A\\\\nB\'.match(/A.B/s)); // A\\\\nB (match!)\\n    ```\\n\\n  - Multiline - `/expression/m`\\n  - Global - `/expression/g`\\n    - With this flag the search looks for all matches, without it \u2013 only the first match is returned\\n\\n### 3. Metacharacters\\n\\n* They\'re characters with special meaning the most common metacharacters we use in expressions are `. + - * $ {} () [] ! : = ^ | `\\n\\n  - Escaping Metacharacters:\\n\\n    - Sometmes we need to escape our symbols if they look the same as the text we want to find,\\n    - for example, As you can see here `/4.500/ ` these match will cause issues if we need to find `4.500` since the dot its the wildecard but what we need is the literal dot, we need to do something like the below.\\n\\n    - `/4\\\\.500/` we use a back slash here to escape the wildcard making it a literal character now, meaning its just a dot.\\n\\n### 4. Range sets\\n\\n  - `[A-Z]` matches any uppercase character from A to Z\\n\\n  - `[a-z]` matches any lowercase character from A to Z\\n\\n  - `[0-9]` matches any digit character from 0 to 9\\n\\n  - `[A-Za-z0-9]` we can also combine them\\n  - `/au[acdt]o/` matches `auto` - third character should be either one from the set `[acdt]`\\n\\n### 5. Negative sets\\n\\n  - `[^abc]` match anything except `abc` or what is after the caret inside the brackets. We are still matching one character here, not group of all character.\\n\\n### 6. Shorthand for sets\\n\\n  | **Code** | **Description**                                             | **Equivalent** |\\n  | :------: | :---------------------------------------------------------- | :------------- |\\n  |    \\\\d    | Digit                                                       | [0-9]          |\\n  |    \\\\D    | Non digit                                                   | [^0-9]         |\\n  |    \\\\s    | Any tab carriage return or new line                         | [ \\\\t\\\\r\\\\n]      |\\n  |    \\\\S    | No whitespace of any kind                                   | [^ \\\\t\\\\r\\\\n]     |\\n  |    \\\\w    | Word characters including underscore & digits, NO Hyphen(-) | [_A-Za-z0-9]   |\\n  |    \\\\W    | No word characters                                          | [ ^_A-Za-z0-9] |\\n\\n  - `/\\\\w\\\\w\\\\w/` matches 123, abc, and \\\\_1Z (i.e, 3 word characters)\\n\\n  - `/\\\\d\\\\d\\\\d/` matches 123 bot not car (i.e, 3 digits)\\n\\n### 7. Repetition Metacharacters\\n\\n  | Quantifier | Description                                                              |\\n  | :--------: | :----------------------------------------------------------------------- |\\n  |     `\\\\*`   | Matches the previous element zero or more times.                         |\\n  |     `+`    | Matches the previous element one or more times.                          |\\n  |     `?`    | Matches the previous element zero or one time.                           |\\n  |    `{n}`   | Matches the previous element exactly n times.                            |\\n  |    `{n,}`  | Matches the previous element at least n times.                           |\\n  |   `{n,m}`  | Matches the previous element at least n times, but no more than m times. |\\n\\n  - `/cars*/` - matches car, cars and carsssssssssss and many more\\n  - `/\\\\d\\\\d\\\\d*/` - matches two digits or more (remember this is starts from zero to more)\\n  - `/cars+/` - does not match car since it needs to be more more than 1 character ,E.G, cars or carsssssssssss\\n  - `/\\\\d\\\\d\\\\d+/` - matches three digits or more (remember this is starts from 1 to more)\\n  - `/cars?/` - the (s) its optional meaning it matches car and cars not carssssssss\\n\\n    - `/\\\\d{1}/` - matches 1 single digits\\n    - `/\\\\d{1,}/` - matches 1 or more digits\\n    - `/\\\\d{1,2}/` - matches 1 to 2 digits\\n\\n### 8. Greedy Expression vs Lazy\\n\\n  - Greedy `\\\\w+\\\\d+\\\\w+` it maches `file1_export` from `file1_export.sql` since it tries to math as much as possible\\n  - Lazy `\\\\w+\\\\d+\\\\w+?` , this matches `file1_` from `file1_export.sql` why is gives up when it find the first word character at the end. (Notice we have a question mark at the end of the w \\"?\\" )\\n  - You can use the lazy format in these quantifiers `_, +. {} ?`, you would have something likes this `_?, +?, {}?, ??`\\n\\n### 9. Grouping & Alternation\\n\\n  - Grouping:\\n\\n    - `/(cde)+/` matches `cde` and `cdecdecdecde`\\n    - `/(super)?market/` matches `market` and `supermarket`\\n    - `(super)market` matches `supermarket`\\n\\n  - Alternation\\n\\n    - `super|market` matches `super` or `market`\\n    - `super(market|bowl)` matches `supermarket` or `superbowl`\\n    - `\\\\(12|ab|#%){8}\\\\` this matches `12ab#%12ab#%12ab`\\n      The code above might seen confusing but was happening is that the sets of characters are repeating until they reach eight times in sets of two. Notice we are wrapping the symbols in parenthesis, basically groping then and then applying the quantifier.\\n\\n### 10. Anchors\\n\\n    | Metacharacter | Description                                                                                  |\\n    | :-----------: | :------------------------------------------------------------------------------------------- |\\n    |       ^       | The match must start at the beginning of the string or line.                                 |\\n    |       $       | The match must occur at the end of the string or before \\\\n at the end of the line or string. |\\n    |      \\\\A       | The match must occur at the start of the string.                                             |\\n    |      \\\\Z       | The match must occur at the end of the string or before \\\\n at the end of the string          |\\n\\n    - `\\\\A` and `\\\\Z` are supported by PHP, Python, Perl, Java and .NET . Maybe other engines will start supporting it the future.\\n\\n    - the` ^` and `$` support `multiline mode`, meaning they can match not just then end of string but the end of lines. With `\\\\A` and `\\\\Z` you cannot do that.\\n      - `/^\\\\./ ` this matches the first dot on `.car.`\\n      - `/\\\\.$/` this matches the last dot on `.car. `\\n\\n### 11. Boundaries\\n\\n    - `\\\\b\\\\w+\\\\b` matches `my car is black`, this will be default behavior without `\\\\b` in this case, so every beginning and end of the word is matched.\\n\\n    - `\\\\B\\\\w+\\\\B` matches `a` from `car` and `lack` from `black`, so letters that are NOT the beginning or end of words are matched here.\\n\\n### 12. Backreferences \\nGrouped expressions that are capture for later usage\\n\\n    - `/super(market)/` matches `supermarket` and stores `market`. So if we wanted to use this store value we would use numbers from 1-9 for example `\\\\1`.\\n\\n      - `super(market) \\\\1` matches `supermarket market` -> `\\\\1` means `market` here.\\n      - `super(market) \\\\1 super(bowl) \\\\2` matches `supermarket market superbowl bowl`\\n      - As you can see we are using the numbers from left to right in order to use the data stored int the parenthesis.\\n      - since capturing happens by default it will eat up the spaces 1-9 that we have, and can slow down our app, to turn this off we just use question mark followed by a colon in the parenthesis like so.. `super(?:market) `\\n\\n      ```js showLineNumbers\\n      let phrase = \'Anand Raja\';\\n      let pattern = /(\\\\w+)\\\\s(\\\\w+)/;\\n\\n      let newPhrase = phrase.replace(pattern, \'$1\');\\n      console.log(\'First: \' + newPhrase);\\n      // Output will be first parenthesis\'s data\\n      // First: Anand\\n\\n      newPhrase = phrase.replace(pattern, \'$2\');\\n      console.log(\'Second: \' + newPhrase);\\n      // Output will be second parenthesis\'s data\\n      // Second: Raja\\n\\n      pattern = /(?:\\\\w+)\\\\s(\\\\w+)/;\\n      newPhrase = phrase.replace(pattern, \'$1\');\\n      console.log(\'Third: \' + newPhrase);\\n      // Output will be second parenthesis\'s data as we\'re turning off capturing for first parenthesis\\n      // Third: Raja\\n\\n      pattern = /(\\\\w+)\\\\s(\\\\w+)\\\\s\\\\1/;\\n      phrase = `love is love`; // \\\\1 denotes love\\n      newPhrase = phrase.replace(pattern, \'$1\');\\n      console.log(\'Fourth: \' + newPhrase);\\n      // Output will be first parenthesis\'s data\\n      // Fourth: love\\n      ```\\n\\n### 13. Positive & Negative Lookaheads\\n\\n    - `super(?=market)` if `super` is preceded by `market`, match it, this will match `super`\\n      - if `supermarket superbowl` is phrase to be checked, `super` from `supermarket` will only be matched. -> meaning market should be preceded by super(i.e, super with market)\\n    - To do the apposite we do this, `super(?!market)`\\n      - if `supermarket superbowl` is phrase to be checked, `super` from `superbowl` will only be matched. -> meaning market should not be there after super(i.e, super without market)\\n\\n### 14. Positive & Negative Lookbehind\\n\\n    - `(?<=super)market` matches `market` in `supermarket`\\n    - `(?<!market)super` matches `super` in `supermarket`\\n    - Lookbehind is not supported in non-V8 browsers, such as Safari, Internet Explorer\\n\\n    - The syntaxes are:\\n\\n      - Positive lookbehind: `(?<=Y)X`, matches `X`, but only if there\u2019s `Y` before it.\\n      - Negative lookbehind: `(?<!Y)X`, matches `X`, but only if there\u2019s no `Y` before it.\\n\\n### 15. Examples\\n\\n    - Postal code to choose either 4 or 5 digits in the begining, or along with that dash and another 4 digits at the end (say `34216-6501`)\\n\\n    ```regex\\n      /^\\\\d{4,5}(-\\\\d{4})?$/\\n    ```\\n\\n    - Password with altest one uppercase, lowercase, and one special character from the list (!,@,$,#,-,^,%,&,\\\\*) with min. 8 and max. 13 characters\\n\\n    ```regex\\n      /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\\\d)(?=.*[!@$#\\\\-\\\\^%&*])\\\\S{8,13}$/\\n    ```\\n\\n    - The below regex will match `27-11-1996` or `05/10/2023` or `7-1-1954` or `7-03-1954`. One disadvantage is year can be any 4 digits.\\n\\n    ```regex\\n      /^(0?[1-9]|[1-2][0-9]|3[0-1])[/-](0?[1-9]|1[0-2])[/-]\\\\d{4}$/\\n    ```\\n\\n    - Select all html tags except [a, ul, li, ol]\\n\\n    ```regex\\n      /<(?!\\\\/?(a|ul|li|ol)(?=>|\\\\s?.*>))\\\\/?.*?>/g\\n    ```\\n\\n    - Select all anchor tags(a tag) in html\\n\\n    ```regex\\n      /<a.*?>|<\\\\/a>/g\\n    ```\\n\\n    - How to select all html tags\\n\\n    ```regex\\n      /<[^>]*>/g\\n    ```\\n\\n### Usefull online Regex validator\\n\\n1. [Regex101](https://regex101.com/)\\n2. [Regex Pal](https://www.regexpal.com/)\\n3. [Regex Pal github source code](https://github.com/rpayanm/regexpal)\\n4. [I hate Regex source code - Vue](https://github.com/geongeorge/i-hate-regex)\\n\\n### Resources\\n\\n1. [Regex to validate date formats dd/mm/YYYY, dd-mm-YYYY, dd.mm.YYYY, dd mmm YYYY, dd-mmm-YYYY, dd/mmm/YYYY, dd.mmm.YYYY with Leap Year Support](https://stackoverflow.com/questions/15491894/regex-to-validate-date-formats-dd-mm-yyyy-dd-mm-yyyy-dd-mm-yyyy-dd-mmm-yyyy)\\n2. [Javascript info - regex](https://javascript.info/regexp-introduction)\\n3. [Learn Regex - github](https://github.com/ziishaned/learn-regex)\\n4. [How to Use Regular Expressions in JavaScript \u2013 Tutorial for Beginners](https://www.freecodecamp.org/news/regular-expressions-for-beginners/)\\n5. [JavaScript Regex - Programiz](https://www.programiz.com/javascript/regex)\\n6. [A Guide to Regular Expressions (Regex) in JavaScript](https://builtin.com/software-engineering-perspectives/javascript-regex)"},{"id":"the-chicken-or-the-egg","metadata":{"permalink":"/wiki/blog/the-chicken-or-the-egg","editUrl":"https://github.com/actionanand/wiki/blog/2024-02-09-chicken-or-egg/index.mdx","source":"@site/blog/2024-02-09-chicken-or-egg/index.mdx","title":"Which came first?","description":"You\'ve heard the age-old riddle the chicken or the egg?\\" Taken metaphorically, it\'s a meditation on the futility of determining the cause of a self-perpetuating cycle. Taken literally, it\'s a great question for evolutionary biologists.","date":"2024-02-09T00:00:00.000Z","formattedDate":"February 9, 2024","tags":[{"label":"js","permalink":"/wiki/blog/tags/js"},{"label":"riddle","permalink":"/wiki/blog/tags/riddle"},{"label":"puzzle","permalink":"/wiki/blog/tags/puzzle"}],"readingTime":0.735,"hasTruncateMarker":true,"authors":[{"name":"Anand Raja","title":"Software Developer","url":"https://github.com/actionanand","imageURL":"https://github.com/actionanand.png","key":"anand"},{"name":"Anand Techie","title":"Software Developer, Frontend","url":"https://github.com/AnandRaja-tech","imageURL":"https://github.com/AnandRaja-tech.png","key":"anand-tech"}],"frontMatter":{"slug":"the-chicken-or-the-egg","title":"Which came first?","authors":["anand","anand-tech"],"tags":["js","riddle","puzzle"]},"unlisted":false,"prevItem":{"title":"JS Regex Helper","permalink":"/wiki/blog/js-regex-helper"},"nextItem":{"title":"Centering a Text Inside a Button","permalink":"/wiki/blog/text-align-center-in-button"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\nYou\'ve heard the age-old riddle: \\"Which came first: the chicken or the egg?\\" Taken metaphorically, it\'s a meditation on the futility of determining the cause of a self-perpetuating cycle. Taken literally, it\'s a great question for evolutionary biologists.\\n\\nChickens come from eggs, but eggs come from chickens. So which came first?\\n\\n\x3c!--truncate--\x3e\\n\\n:::tip\\nWhich came first, *the chicken* or *the egg*?\\n\\n<Tabs>\\n  <TabItem value=\\"js\\" label=\\"JS\\">\\n  ```js\\n  const question = [\'\ud83e\udd5a\',\'\ud83d\udc14\'];\\n  const answer = question.sort();\\n  console.log(answer[0] + \' was first!\');\\n  ```\\n  </TabItem>\\n  <TabItem value=\\"react\\" label=\\"React\\">\\n  ```jsx\\n  <button onClick={\\n    () => {\\n      const question = [\'\ud83e\udd5a\',\'\ud83d\udc14\'];\\n      const answer = question.sort();\\n      return alert(answer[0] + \' was first!\');\\n    } \\n  }>Click me!</button>\\n  ```\\n  </TabItem>\\n</Tabs>\\n\\n<button onClick={\\n  () => {\\n    const question = [\'\ud83e\udd5a\',\'\ud83d\udc14\'];\\n    const answer = question.sort();\\n    return alert(answer[0] + \' was first!\');\\n  } \\n}>Click me!</button>\\n\\n:::\\n\\n\x3c!-- https://images.newscientist.com/wp-content/uploads/2021/05/21153947/what-came-first-the-chicken-or-the-egg-gettyimages-a0048-000156_chickenegg_web.jpg --\x3e\\n![chicken or egg](./chicken-egg.jpg)"},{"id":"text-align-center-in-button","metadata":{"permalink":"/wiki/blog/text-align-center-in-button","editUrl":"https://github.com/actionanand/wiki/blog/2024-02-08-text-align-center.md","source":"@site/blog/2024-02-08-text-align-center.md","title":"Centering a Text Inside a Button","description":"Instead of centering headings and paragraphs, let\u2019s center text inside another element ( ). Aligning the button, and the text inside the button, would differ slightly from the examples.","date":"2024-02-08T00:00:00.000Z","formattedDate":"February 8, 2024","tags":[{"label":"css","permalink":"/wiki/blog/tags/css"},{"label":"center-css","permalink":"/wiki/blog/tags/center-css"}],"readingTime":0.66,"hasTruncateMarker":false,"authors":[{"name":"Anand Raja","title":"Software Developer","url":"https://github.com/actionanand","image_url":"https://github.com/actionanand.png","imageURL":"https://github.com/actionanand.png"},{"name":"Anand Techie","title":"Software Developer, JS Specialist"}],"frontMatter":{"slug":"text-align-center-in-button","title":"Centering a Text Inside a Button","authors":[{"name":"Anand Raja","title":"Software Developer","url":"https://github.com/actionanand","image_url":"https://github.com/actionanand.png","imageURL":"https://github.com/actionanand.png"},{"name":"Anand Techie","title":"Software Developer, JS Specialist"}],"tags":["css","center-css"]},"unlisted":false,"prevItem":{"title":"Which came first?","permalink":"/wiki/blog/the-chicken-or-the-egg"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\nInstead of centering headings and paragraphs, let\u2019s center text inside another element (`<button> </button>`). Aligning the button, and the text inside the button, would differ slightly from the examples.\\n\\nThat\u2019s because the text-align property only works on the content inside block-level elements, such as headings and paragraphs, and not inline elements, such as buttons.\\n\\nSo here\'s what we\'ll do instead:\\n\\n* Wrap the button in a `div`\\n* Then, add an inline style declaration to the div, i.e. `<div style=\\"text-align:center\\">`.\\n\\n\\n<Tabs>\\n  <TabItem value=\\"html\\" label=\\"HTML\\">\\n    ```html\\n    <div style=\\"text-align:center\\">\\n      <button type=\\"button\\" class=\\"btn btn-primary\\">Click Me</button>\\n    </div>\\n    ```\\n  </TabItem>\\n  <TabItem value=\\"css\\" label=\\"CSS\\">\\n    ```css\\n    .btn{\\n      background-color: #0068B1; \\n      font-family: \'Lexend Deca\', sans-serif;\\n      text-transform: uppercase;\\n      color: white;\\n      padding: 20px; \\n      width: 200px;\\n      border-radius: 10px;\\n    }\\n\\n    .btn:hover{\\n      background-color: #408EC5;\\n    }\\n    ```\\n  </TabItem>\\n</Tabs>"}]}')}}]);