"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[1137],{82223:(e,n,t)=>{t.d(n,{A:()=>l});t(96540);var r=t(34164);const a={tabItem:"tabItem_Ymn6"};var i=t(74848);function l(e){let{children:n,hidden:t,className:l}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(a.tabItem,l),hidden:t,children:n})}},72206:(e,n,t)=>{t.d(n,{A:()=>A});var r=t(96540),a=t(34164),i=t(80052),l=t(56347),s=t(35793),o=t(99025),u=t(4430),c=t(44148);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}(t);return function(e){const n=(0,u.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(i),(0,r.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,i=p(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:i}))),[u,d]=m({queryString:t,groupId:a}),[f,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,i]=(0,c.Dv)(t);return[a,(0,r.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:a}),y=(()=>{const e=u??f;return h({value:e,tabValues:i})?e:null})();(0,s.A)((()=>{y&&o(y)}),[y]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),d(e),g(e)}),[d,g,i]),tabValues:i}}var g=t(75251);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=t(74848);function x(e){let{className:n,block:t,selectedValue:r,selectValue:l,tabValues:s}=e;const o=[],{blockElementScrollPositionUntilNextRender:u}=(0,i.a_)(),c=e=>{const n=e.currentTarget,t=o.indexOf(n),a=s[t].value;a!==r&&(u(n),l(a))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>{o.push(e)},onKeyDown:d,onClick:c,...i,className:(0,a.A)("tabs__item",y.tabItem,i?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:i}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:l.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function v(e){const n=f(e);return(0,j.jsxs)("div",{className:(0,a.A)("tabs-container",y.tabList),children:[(0,j.jsx)(x,{...n,...e}),(0,j.jsx)(b,{...n,...e})]})}function A(e){const n=(0,g.A)();return(0,j.jsx)(v,{...e,children:d(e.children)},String(n))}},132:(e,n,t)=>{t.d(n,{A:()=>a});t(96540);var r=t(74848);function a(e){let{children:n,color:t,highlight:a="bg",fontWeight:i="normal",textDecoration:l="none",fontStyle:s="normal",textAlign:o="left"}=e;return"fg"===a?(0,r.jsx)("span",{style:{color:t,fontWeight:i,textDecoration:l,fontStyle:s,textAlign:o},children:n}):"format"===a?(0,r.jsx)("div",{style:{textAlign:o,color:t,fontWeight:i,textDecoration:l,fontStyle:s},children:n}):"lightBg"===a?(0,r.jsx)("span",{style:{backgroundColor:t,borderRadius:"4px",color:"#4B0082",padding:"0.2rem",paddingTop:"0"},children:n}):(0,r.jsx)("span",{style:{backgroundColor:t,borderRadius:"4px",color:"#fff",padding:"0.2rem",paddingTop:"0"},children:n})}},30612:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>u,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"js-tips/json-into-array-using-map","title":"JSON into Map & Array","description":"TypeScript Model","source":"@site/docs/js-tips/json-into-array-using-map.mdx","sourceDirName":"js-tips","slug":"/js-tips/json-into-array-using-map","permalink":"/wiki/docs/js-tips/json-into-array-using-map","draft":false,"unlisted":false,"editUrl":"https://github.com/actionanand/wiki/docs/js-tips/json-into-array-using-map.mdx","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"sidebar_label":"JSON into Map","title":"JSON into Map & Array"},"sidebar":"tutorialSidebar","previous":{"title":"Typescript Types","permalink":"/wiki/docs/js-tips/typescript-types"},"next":{"title":"Support Functions","permalink":"/wiki/docs/js-tips/support-functions"}}');var a=t(74848),i=t(28453),l=t(72206),s=t(82223),o=t(132);const u={sidebar_position:8,sidebar_label:"JSON into Map",title:"JSON into Map & Array"},c="JSON into Map & Array",d={},p=[{value:"<code>Map&lt;string, string[]&gt;</code>",id:"mapstring-string",level:2},{value:"<code>Map&lt;string, string&gt;</code>",id:"mapstring-string-1",level:2},{value:"<Highlight>Array of Arrays</Highlight> into <Highlight>Array of Objects</Highlight>",id:"array-of-arrays-into-array-of-objects",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"json-into-map--array",children:"JSON into Map & Array"})}),"\n",(0,a.jsxs)(t,{children:[(0,a.jsx)("summary",{children:"TypeScript Model"}),(0,a.jsx)("div",{children:(0,a.jsxs)(l.A,{children:[(0,a.jsx)(s.A,{value:"JSON",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'const animalFilters = {\n  appliedSearchFilters: [\n    {\n      filterKey: "animalType",\n      filterType: "CHAIN",\n      appliedOptions: [\n        {\n          optionName: "Dog",\n          optionId: "DOG",\n          optionValue: "dog",\n          optionGroupName: null,\n          count: 500,\n          children: null,\n          properties: null\n        },\n        {\n          optionName: "Cat",\n          optionId: "CAT",\n          optionValue: "cat",\n          optionGroupName: null,\n          count: 300,\n          children: null,\n          properties: null\n        },\n        {\n          optionName: "Horse",\n          optionId: "HORSE",\n          optionValue: "Horse",\n          optionGroupName: null,\n          count: 150,\n          children: null,\n          properties: null\n        }\n      ]\n    },\n    {\n      filterKey: "animalBreed",\n      filterType: "CHAIN",\n      appliedOptions: [\n        {\n          optionName: "Labrador",\n          optionId: null,\n          optionValue: "labrador",\n          optionGroupName: null,\n          count: 150,\n          children: null,\n          properties: null\n        },\n        {\n          optionName: "Persian",\n          optionId: null,\n          optionValue: "persian",\n          optionGroupName: null,\n          count: 100,\n          children: null,\n          properties: null\n        }\n      ]\n    },\n    {\n      filterKey: "animalStatus",\n      filterType: "BOOLEAN",\n      appliedOptions: [\n        {\n          optionId: "AVAILABLE",\n          optionName: "Available",\n          optionValue: "available"\n        },\n        {\n          optionId: "ADOPTED",\n          optionName: "Adopted",\n          optionValue: "adopted"\n        }\n      ]\n    }\n  ]\n};\n'})})}),(0,a.jsx)(s.A,{value:"Result 1",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Output: [string, string[]][];\n[\n  ["animalType", ["Dog", "Cat", "Horse"]],\n  ["animalBreed", ["Labrador", "Persian"]]\n]\n'})})}),(0,a.jsx)(s.A,{value:"Result 2",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-TypeScript",children:'// Output of resultArray2 - [string, string][];\n[\n  ["animalType", "Animal Type: Dog; Cat; Horse"],\n  ["animalBreed", "Animal Breed: Labrador; Persian"],\n  ["animalStatus", "Animal Status: Available | Adopted"]\n]\n'})})})]})})]}),"\n",(0,a.jsx)(n.h2,{id:"mapstring-string",children:(0,a.jsx)(n.code,{children:"Map<string, string[]>"})}),"\n",(0,a.jsxs)(n.p,{children:["To convert the given object into the desired format using ",(0,a.jsx)(n.code,{children:"Map<string, string[]>"})," in TypeScript and ",(0,a.jsx)("br",{})," skip the filters with ",(0,a.jsx)(n.code,{children:"filterType"})," as ",(0,a.jsx)(n.code,{children:"BOOLEAN"}),", ",(0,a.jsx)("br",{})," you can follow these steps:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Create a new ",(0,a.jsx)(n.code,{children:"Map<string, string[]>"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Iterate over the ",(0,a.jsx)(n.code,{children:"appliedSearchFilters"})," array."]}),"\n",(0,a.jsxs)(n.li,{children:["For each filter, check if the ",(0,a.jsx)(n.code,{children:"filterType"})," is not ",(0,a.jsx)(n.code,{children:"BOOLEAN"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["For each filter, extract the ",(0,a.jsx)(n.code,{children:"filterKey"})," and the ",(0,a.jsx)(n.code,{children:"optionName"})," values."]}),"\n",(0,a.jsx)(n.li,{children:"Add these values to the map."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const resultMap1 = new Map<string, string[]>();\n\nanimalFilters.appliedSearchFilters.forEach(filter => {\n  if (filter.filterType !== 'BOOLEAN') {\n    const key = filter.filterKey;\n    const values = filter.appliedOptions.map(option => option.optionName);\n    resultMap1.set(key, values);\n  }\n});\n\n// Convert the Map to the desired array format i.e) [string, string[]][];\nconst resultArray1 = Array.from(resultMap1.entries());\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-TypeScript",children:'console.log(resultMap1);\n// Output of resultMap1 - Map<string, string[]>;\nMap (2) {\n  "animalType" => ["Dog", "Cat", "Horse"],\n   "animalBreed" => ["Labrador", "Persian"]\n   }\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-TypeScript",children:'console.log(resultArray1);\n// Output of resultArray1 - [string, string[]][];\n[\n  ["animalType", ["Dog", "Cat", "Horse"]],\n  ["animalBreed", ["Labrador", "Persian"]]\n]\n'})}),"\n",(0,a.jsx)(n.h2,{id:"mapstring-string-1",children:(0,a.jsx)(n.code,{children:"Map<string, string>"})}),"\n",(0,a.jsxs)(n.p,{children:["To convert the given object into the desired format using ",(0,a.jsx)(n.code,{children:"Map<string, string>"})," in TypeScript, ",(0,a.jsx)("br",{})," you can follow these steps:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Create a new ",(0,a.jsx)(n.code,{children:"Map<string, string>"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Iterate over the ",(0,a.jsx)(n.code,{children:"appliedSearchFilters"})," array."]}),"\n",(0,a.jsxs)(n.li,{children:["Extract the ",(0,a.jsx)(n.code,{children:"filterKey"})," and the ",(0,a.jsx)(n.code,{children:"optionName"})," values."]}),"\n",(0,a.jsx)(n.li,{children:"Format the values as required and add them to the map."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"const resultMap2 = new Map<string, string>();\n\nanimalFilters.appliedSearchFilters.forEach(filter => {\n  const key = filter.filterKey;\n  const values = filter.appliedOptions.map(option => option.optionName).join('; ');\n\n  let formattedValue: string;\n\n  switch (key) {\n    case 'animalType':\n      formattedValue = `Animal Type: ${values}`;\n      break;\n    case 'animalBreed':\n      formattedValue = `Animal Breed: ${values}`;\n      break;\n    case 'animalStatus':\n      formattedValue = `Animal Status: ${values.replace('; ', ' | ')}`;\n      break;\n    default:\n      formattedValue = values;\n  }\n  resultMap2.set(key, formattedValue);\n});\n\n// Convert the Map to the desired array format i.e) [string, string][];\nconst resultArray2 = Array.from(resultMap2.entries());\n\nconsole.log(resultArray2);\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-TypeScript",children:'console.log(resultMap2);\n// Output of resultMap2 - Map<string, string>;\nMap (3) {\n  "animalType" => "Animal Type: Dog; Cat; Horse", \n  "animalBreed" => "Animal Breed: Labrador; Persian", \n  "animalStatus" => "Animal Status: Available | Adopted"\n  }\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-TypeScript",children:'console.log(resultArray2);\n// Output of resultArray2 - [string, string][];\n[\n  ["animalType", "Animal Type: Dog; Cat; Horse"],\n  ["animalBreed", "Animal Breed: Labrador; Persian"],\n  ["animalStatus", "Animal Status: Available | Adopted"]\n]\n'})}),"\n",(0,a.jsxs)(n.h2,{id:"array-of-arrays-into-array-of-objects",children:[(0,a.jsx)(o.A,{color:"#C0C0C0",children:"Array of Arrays"})," into ",(0,a.jsx)(o.A,{color:"#C0C0C0",children:"Array of Objects"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'// Filter and map the array to include only the desired keys\nconst convertedArray = inputArray\n  .filter(([key]) => key !== "fruitStatus" && key !== "fruitIsSeasonal")\n  .map(([key, value]) => ({ key, value }));\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'// input\n\nconst inputArray = [\n  ["fruitName", "Name: Apple"],\n  ["fruitColor", "Color: Red"],\n  ["fruitStatus", "Status: Fresh"],\n  ["fruitIsSeasonal", "IsSeasonal: true"]\n];\n\n// Output\n\n[\n  { key: "fruitName", value: "Name: Apple" },\n  { key: "fruitColor", value: "Color: Red" }\n]\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'// input\n\nconst inputArray = [\n  ["fruitName", ["Apple"]],\n  ["fruitColor", ["Red"]],\n  ["fruitStatus", ["Fresh"]],\n  ["fruitIsSeasonal", ["true"]]\n];\n\n// Output\n\n[\n  { key: "fruitName", value: ["Apple"] },\n  { key: "fruitColor", value: ["Red"] }\n]\n'})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var r=t(96540);const a={},i=r.createContext(a);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);