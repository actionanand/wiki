"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[3273],{132:(e,r,n)=>{n.d(r,{A:()=>o});n(96540);var t=n(74848);function o(e){let{children:r,color:n,highlight:o="bg",fontWeight:a="normal",textDecoration:s="none",fontStyle:i="normal",textAlign:l="left"}=e;return"fg"===o?(0,t.jsx)("span",{style:{color:n,fontWeight:a,textDecoration:s,fontStyle:i,textAlign:l},children:r}):"format"===o?(0,t.jsx)("div",{style:{textAlign:l,color:n,fontWeight:a,textDecoration:s,fontStyle:i},children:r}):"lightBg"===o?(0,t.jsx)("span",{style:{backgroundColor:n,borderRadius:"4px",color:"#4B0082",padding:"0.2rem",paddingTop:"0"},children:r}):(0,t.jsx)("span",{style:{backgroundColor:n,borderRadius:"4px",color:"#fff",padding:"0.2rem",paddingTop:"0"},children:r})}},36862:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Angular/know-your-angular-part2","title":"Know Your Angular Part 2","description":"Making HTTP Requests and managing different HTTP codes","source":"@site/docs/Angular/know-your-angular-part2.mdx","sourceDirName":"Angular","slug":"/Angular/know-your-angular-part2","permalink":"/wiki/docs/Angular/know-your-angular-part2","draft":false,"unlisted":false,"editUrl":"https://github.com/actionanand/wiki/docs/Angular/know-your-angular-part2.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"Know Your Angular - part 2","title":"Know Your Angular Part 2"},"sidebar":"tutorialSidebar","previous":{"title":"Know Your Angular - part 1","permalink":"/wiki/docs/Angular/know-your-angular"},"next":{"title":"Angular Reusable component","permalink":"/wiki/docs/Angular/angular-reusable-component"}}');var o=n(74848),a=n(28453);n(132);const s={sidebar_position:2,sidebar_label:"Know Your Angular - part 2",title:"Know Your Angular Part 2"},i=void 0,l={},c=[{value:"Making HTTP Requests and managing different HTTP codes",id:"making-http-requests-and-managing-different-http-codes",level:2},{value:"Example Service:",id:"example-service",level:4}];function d(e){const r={code:"code",h2:"h2",h4:"h4",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"making-http-requests-and-managing-different-http-codes",children:"Making HTTP Requests and managing different HTTP codes"}),"\n",(0,o.jsxs)(r.p,{children:["Use Angular's ",(0,o.jsx)(r.code,{children:"HttpClient"})," to make HTTP requests. Here's an example of a GET request that handles different HTTP status codes, including ",(0,o.jsx)(r.strong,{children:"202 Accepted"}),":"]}),"\n",(0,o.jsx)(r.h4,{id:"example-service",children:"Example Service:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-typescript",children:"// my-service.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MyService {\n  private apiUrl = 'https://api.example.com/data'; // Replace with your API URL\n\n  constructor(private http: HttpClient) {}\n\n  getData(): Observable<any> {\n    return this.http.get(this.apiUrl, { observe: 'response' }).pipe(\n      tap((response) => {\n        if (response.status === 202) {\n          console.log('Request accepted but processing is not complete.');\n        }\n      }),\n      map((response) => response.body), // Extract the response body\n      catchError(this.handleError) // Handle errors\n    );\n  }\n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    let errorMessage = 'An unknown error occurred!';\n    if (error.error instanceof ErrorEvent) {\n      // Client-side error\n      errorMessage = `Client-side error: ${error.error.message}`;\n    } else {\n      // Server-side error\n      switch (error.status) {\n        case 400:\n          errorMessage = 'Bad Request';\n          break;\n        case 401:\n          errorMessage = 'Unauthorized';\n          break;\n        case 403:\n          errorMessage = 'Forbidden';\n          break;\n        case 404:\n          errorMessage = 'Not Found';\n          break;\n        case 500:\n          errorMessage = 'Internal Server Error';\n          break;\n        case 202:\n          errorMessage = 'Request Accepted but not yet processed.';\n          break;\n        default:\n          errorMessage = `Unexpected error: ${error.status}`;\n      }\n    }\n    console.error(errorMessage);\n    return throwError(() => new Error(errorMessage));\n  }\n}\n"})}),"\n",(0,o.jsx)(r.hr,{})]})}function p(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>i});var t=n(96540);const o={},a=t.createContext(o);function s(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);