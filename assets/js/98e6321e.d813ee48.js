"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[6028],{76141:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"Angular/content-projection","title":"Content Projection in Angular","description":"Content projection in Angular is a pattern that allows you to insert or project content from a parent component into a child component. It enables developers to create reusable and flexible components by allowing the parent to control what content is displayed inside the child component.","source":"@site/docs/Angular/content-projection.mdx","sourceDirName":"Angular","slug":"/Angular/content-projection","permalink":"/wiki/docs/Angular/content-projection","draft":false,"unlisted":false,"editUrl":"https://github.com/actionanand/wiki/docs/Angular/content-projection.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"sidebar_label":"Content Projection","title":"Content Projection in Angular"},"sidebar":"tutorialSidebar","previous":{"title":"Angular Reusable component","permalink":"/wiki/docs/Angular/angular-reusable-component"},"next":{"title":"Accessibility Compliance","permalink":"/wiki/docs/Angular/accessibility-compliance"}}');var c=t(74848),i=t(28453);const l={sidebar_position:4,sidebar_label:"Content Projection",title:"Content Projection in Angular"},r=void 0,s={},a=[{value:"How It Works:",id:"how-it-works",level:3},{value:"Example:",id:"example",level:3},{value:"Child Component (<code>child.component.html</code>):",id:"child-component-childcomponenthtml",level:4},{value:"Parent Component (<code>parent.component.html</code>):",id:"parent-component-parentcomponenthtml",level:4},{value:"Result:",id:"result",level:4},{value:"Advanced Content Projection:",id:"advanced-content-projection",level:3},{value:"Example of Multiple Projections:",id:"example-of-multiple-projections",level:4},{value:"Use Cases:",id:"use-cases",level:3},{value:"Aliasing <code>ngProjectAs</code>",id:"aliasing-ngprojectas",level:2},{value:"Resources",id:"resources",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.p,{children:"Content projection in Angular is a pattern that allows you to insert or project content from a parent component into a child component. It enables developers to create reusable and flexible components by allowing the parent to control what content is displayed inside the child component."}),"\n",(0,c.jsx)(n.h3,{id:"how-it-works",children:"How It Works:"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsxs)(n.strong,{children:[(0,c.jsx)(n.code,{children:"<ng-content>"})," Directive"]}),": The ",(0,c.jsx)(n.code,{children:"ng-content"})," directive is used in the child component's template to define where the projected content will be inserted."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Parent-Child Relationship"}),": The parent component provides the content, and the child component determines where and how to display it."]}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"example",children:"Example:"}),"\n",(0,c.jsxs)(n.h4,{id:"child-component-childcomponenthtml",children:["Child Component (",(0,c.jsx)(n.code,{children:"child.component.html"}),"):"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:'<div class="child-container">\n  <h2>Child Component</h2>\n  <ng-content></ng-content> \x3c!-- Content from the parent will be projected here --\x3e\n</div>\n'})}),"\n",(0,c.jsxs)(n.h4,{id:"parent-component-parentcomponenthtml",children:["Parent Component (",(0,c.jsx)(n.code,{children:"parent.component.html"}),"):"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:"<app-child>\n  <p>This is projected content from the parent component.</p>\n</app-child>\n"})}),"\n",(0,c.jsx)(n.h4,{id:"result",children:"Result:"}),"\n",(0,c.jsx)(n.p,{children:"The rendered output will look like this:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:'<div class="child-container">\n  <h2>Child Component</h2>\n  <p>This is projected content from the parent component.</p>\n</div>\n'})}),"\n",(0,c.jsx)(n.h3,{id:"advanced-content-projection",children:"Advanced Content Projection:"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Multiple Projections"}),": You can use multiple ",(0,c.jsx)(n.code,{children:"<ng-content>"})," tags with ",(0,c.jsx)(n.code,{children:"select"})," attributes to project specific parts of the content."]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Default Content"}),": If no content is provided by the parent, you can include default content in the child component."]}),"\n"]}),"\n",(0,c.jsx)(n.h4,{id:"example-of-multiple-projections",children:"Example of Multiple Projections:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-html",children:'\x3c!-- Child Component --\x3e\n<div>\n  <header>\n    <ng-content select="[header]"></ng-content>\n  </header>\n  <main>\n    <ng-content></ng-content>\n  </main>\n</div>\n\n\x3c!-- Parent Component --\x3e\n<app-child>\n  <div header>Header Content</div>\n  <p>Main Content</p>\n</app-child>\n'})}),"\n",(0,c.jsx)(n.h3,{id:"use-cases",children:"Use Cases:"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Creating reusable UI components like modals, tabs, or cards."}),"\n",(0,c.jsx)(n.li,{children:"Allowing flexibility in how components are used by their parent components."}),"\n"]}),"\n",(0,c.jsxs)(n.h2,{id:"aliasing-ngprojectas",children:["Aliasing ",(0,c.jsx)(n.code,{children:"ngProjectAs"})]}),"\n",(0,c.jsx)(n.p,{children:"Considering the following component:"}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:'@Component({\n  selector: "app-card",\n  template: `\n    <div class="card">\n      <div class="card-header">\n        <ng-content select="app-card-title" />\n      </div>\n      <div class="card-body">\n        <ng-content select="app-card-body" />\n      </div>\n      <div class="card-footer">\n        <ng-content select="app-card-footer" />\n      </div>\n    </div>\n  `,\n})\nexport class Card {}\n'})}),"\n",(0,c.jsxs)(n.p,{children:["The named slots have changed to ",(0,c.jsx)(n.code,{children:"app-card-title"}),", ",(0,c.jsx)(n.code,{children:"app-card-body"}),", and ",(0,c.jsx)(n.code,{children:"app-card-footer"}),". This means that the consumers would have to use ",(0,c.jsx)(n.code,{children:"<app-card-title />"})," for the ",(0,c.jsx)(n.code,{children:"card-header"})," projection slot and so on."]}),"\n",(0,c.jsxs)(n.p,{children:["This, in a sense, allows the consumers to use the ",(0,c.jsx)(n.code,{children:"Card"})," component more correctly but it is also more strict. Sometimes, you might want to render more elements than just ",(0,c.jsx)(n.code,{children:"<app-card-title />"})," for the header slot. This is where ",(0,c.jsx)(n.code,{children:"ngProjectAs"})," comes in"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-ts",children:'<app-card>\n  <app-card-title>Card Title</app-card-title>\n</app-card>\n\n// along with `app-card-title` html selector (card title component) we have to use <i></i> html selector also.\n// If we\'re not using `ngProjectAs`, other than <app-card-title></app-card-title> could have not been considered.\n<app-card>\n  <ng-container ngProjectAs="app-card-title">\n    <app-card-title>Card Title</app-card-title>\n    <i>some_icon</i>\n  </ng-contaier>\n</app-card>\n'})}),"\n",(0,c.jsx)(n.h3,{id:"resources",children:"Resources"}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsx)(n.li,{children:(0,c.jsx)(n.a,{href:"https://nartc.me/blog/angular-content-projection/",children:"Angular Content Projection"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var o=t(96540);const c={},i=o.createContext(c);function l(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:l(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);