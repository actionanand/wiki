"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[8878],{60839:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"js-tips/cb-promise-async","title":"callbacks, promises, and async/await","description":"In JavaScript and TypeScript, callbacks, promises, and async/await are mechanisms for handling asynchronous operations. Here\'s an explanation of each, along with examples:","source":"@site/docs/js-tips/cb-promise-async.md","sourceDirName":"js-tips","slug":"/js-tips/cb-promise-async","permalink":"/wiki/docs/js-tips/cb-promise-async","draft":false,"unlisted":false,"editUrl":"https://github.com/actionanand/wiki/docs/js-tips/cb-promise-async.md","tags":[],"version":"current","sidebarPosition":14,"frontMatter":{"sidebar_position":14,"sidebar_label":"Cb Promise Async","title":"callbacks, promises, and async/await"},"sidebar":"tutorialSidebar","previous":{"title":"Decorator in Typescript","permalink":"/wiki/docs/js-tips/decorator"},"next":{"title":"Hacker Rank part-1","permalink":"/wiki/docs/js-tips/hacker-rank"}}');var a=s(74848),t=s(28453);const i={sidebar_position:14,sidebar_label:"Cb Promise Async",title:"callbacks, promises, and async/await"},c=void 0,l={},o=[{value:"<strong>1. Callbacks</strong>",id:"1-callbacks",level:2},{value:"Example:",id:"example",level:3},{value:"Pros:",id:"pros",level:3},{value:"Cons:",id:"cons",level:3},{value:"<strong>2. Promises</strong>",id:"2-promises",level:2},{value:"Example:",id:"example-1",level:3},{value:"Pros:",id:"pros-1",level:3},{value:"Cons:",id:"cons-1",level:3},{value:"<strong>3. Async/Await</strong>",id:"3-asyncawait",level:2},{value:"Example:",id:"example-2",level:3},{value:"Pros:",id:"pros-2",level:3},{value:"Cons:",id:"cons-2",level:3},{value:"<strong>Comparison</strong>",id:"comparison",level:2},{value:"<strong>Practical Example: Fetching Data</strong>",id:"practical-example-fetching-data",level:2},{value:"Using Callbacks:",id:"using-callbacks",level:3},{value:"Using Promises:",id:"using-promises",level:3},{value:"Using Async/Await:",id:"using-asyncawait",level:3},{value:"<strong>When to Use What</strong>",id:"when-to-use-what",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["In JavaScript and TypeScript, ",(0,a.jsx)(n.strong,{children:"callbacks"}),", ",(0,a.jsx)(n.strong,{children:"promises"}),", and ",(0,a.jsx)(n.strong,{children:"async/await"})," are mechanisms for handling asynchronous operations. Here's an explanation of each, along with examples:"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"1-callbacks",children:(0,a.jsx)(n.strong,{children:"1. Callbacks"})}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.strong,{children:"callback"})," is a function passed as an argument to another function, which is executed after the completion of an asynchronous operation."]}),"\n",(0,a.jsx)(n.h3,{id:"example",children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"function fetchData(callback: (data: string) => void): void {\n  setTimeout(() => {\n    callback('Data fetched successfully!');\n  }, 1000); // Simulates an asynchronous operation\n}\n\nfetchData((data) => {\n  console.log(data); // Output: Data fetched successfully!\n});\n"})}),"\n",(0,a.jsx)(n.h3,{id:"pros",children:"Pros:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Simple to use for small tasks."}),"\n",(0,a.jsx)(n.li,{children:"Works well for basic asynchronous operations."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"cons",children:"Cons:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Leads to ",(0,a.jsx)(n.strong,{children:"callback hell"})," when there are multiple nested callbacks."]}),"\n",(0,a.jsx)(n.li,{children:"Difficult to read and maintain."}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"2-promises",children:(0,a.jsx)(n.strong,{children:"2. Promises"})}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.strong,{children:"promise"})," represents a value that may be available now, in the future, or never. It provides ",(0,a.jsx)(n.code,{children:".then()"})," and ",(0,a.jsx)(n.code,{children:".catch()"})," methods to handle success and failure."]}),"\n",(0,a.jsx)(n.h3,{id:"example-1",children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"function fetchData(): Promise<string> {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const success = true; // Simulate success or failure\n      if (success) {\n        resolve('Data fetched successfully!');\n      } else {\n        reject('Failed to fetch data.');\n      }\n    }, 1000);\n  });\n}\n\nfetchData()\n  .then((data) => {\n    console.log(data); // Output: Data fetched successfully!\n  })\n  .catch((error) => {\n    console.error(error); // Output: Failed to fetch data.\n  });\n"})}),"\n",(0,a.jsx)(n.h3,{id:"pros-1",children:"Pros:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Avoids callback hell by chaining ",(0,a.jsx)(n.code,{children:".then()"})," and ",(0,a.jsx)(n.code,{children:".catch()"}),"."]}),"\n",(0,a.jsx)(n.li,{children:"Easier to read and maintain compared to callbacks."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"cons-1",children:"Cons:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Can still become verbose with multiple ",(0,a.jsx)(n.code,{children:".then()"})," chains."]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"3-asyncawait",children:(0,a.jsx)(n.strong,{children:"3. Async/Await"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Async/await"})," is a syntactic sugar built on top of promises. It allows you to write asynchronous code in a synchronous style using ",(0,a.jsx)(n.code,{children:"async"})," and ",(0,a.jsx)(n.code,{children:"await"})," keywords."]}),"\n",(0,a.jsx)(n.h3,{id:"example-2",children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"async function fetchData(): Promise<string> {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const success = true; // Simulate success or failure\n      if (success) {\n        resolve('Data fetched successfully!');\n      } else {\n        reject('Failed to fetch data.');\n      }\n    }, 1000);\n  });\n}\n\nasync function getData() {\n  try {\n    const data = await fetchData();\n    console.log(data); // Output: Data fetched successfully!\n  } catch (error) {\n    console.error(error); // Output: Failed to fetch data.\n  }\n}\n\ngetData();\n"})}),"\n",(0,a.jsx)(n.h3,{id:"pros-2",children:"Pros:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Simplifies asynchronous code, making it easier to read and maintain."}),"\n",(0,a.jsxs)(n.li,{children:["Handles errors using ",(0,a.jsx)(n.code,{children:"try/catch"}),", which is more intuitive."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"cons-2",children:"Cons:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Requires modern JavaScript/TypeScript runtime (ES2017 or later)."}),"\n",(0,a.jsx)(n.li,{children:"Still relies on promises under the hood."}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"comparison",children:(0,a.jsx)(n.strong,{children:"Comparison"})}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"Feature"})}),(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"Callbacks"})}),(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"Promises"})}),(0,a.jsx)(n.th,{children:(0,a.jsx)(n.strong,{children:"Async/Await"})})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Ease of Use"})}),(0,a.jsx)(n.td,{children:"Simple for small tasks"}),(0,a.jsx)(n.td,{children:"Easier than callbacks"}),(0,a.jsx)(n.td,{children:"Simplest and most readable"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Readability"})}),(0,a.jsx)(n.td,{children:"Hard to read with nested calls"}),(0,a.jsx)(n.td,{children:"Better than callbacks"}),(0,a.jsx)(n.td,{children:"Very clean and readable"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Error Handling"})}),(0,a.jsx)(n.td,{children:"Requires manual error handling"}),(0,a.jsxs)(n.td,{children:[(0,a.jsx)(n.code,{children:".catch()"})," for errors"]}),(0,a.jsxs)(n.td,{children:[(0,a.jsx)(n.code,{children:"try/catch"})," for errors"]})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Chaining"})}),(0,a.jsx)(n.td,{children:"Difficult"}),(0,a.jsxs)(n.td,{children:["Easy with ",(0,a.jsx)(n.code,{children:".then()"})]}),(0,a.jsxs)(n.td,{children:["Implicit with ",(0,a.jsx)(n.code,{children:"await"})]})]})]})]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"practical-example-fetching-data",children:(0,a.jsx)(n.strong,{children:"Practical Example: Fetching Data"})}),"\n",(0,a.jsx)(n.h3,{id:"using-callbacks",children:"Using Callbacks:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"function fetchData(callback: (data: string) => void, errorCallback: (error: string) => void): void {\n  setTimeout(() => {\n    const success = true;\n    if (success) {\n      callback('Data fetched successfully!');\n    } else {\n      errorCallback('Failed to fetch data.');\n    }\n  }, 1000);\n}\n\nfetchData(\n  (data) => console.log(data),\n  (error) => console.error(error)\n);\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"using-promises",children:"Using Promises:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"function fetchData(): Promise<string> {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const success = true;\n      if (success) {\n        resolve('Data fetched successfully!');\n      } else {\n        reject('Failed to fetch data.');\n      }\n    }, 1000);\n  });\n}\n\nfetchData()\n  .then((data) => console.log(data))\n  .catch((error) => console.error(error));\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"using-asyncawait",children:"Using Async/Await:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"async function fetchData(): Promise<string> {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const success = true;\n      if (success) {\n        resolve('Data fetched successfully!');\n      } else {\n        reject('Failed to fetch data.');\n      }\n    }, 1000);\n  });\n}\n\nasync function getData() {\n  try {\n    const data = await fetchData();\n    console.log(data);\n  } catch (error) {\n    console.error(error);\n  }\n}\n\ngetData();\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"when-to-use-what",children:(0,a.jsx)(n.strong,{children:"When to Use What"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Callbacks"}),": Use for very simple asynchronous operations (not recommended for complex tasks)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Promises"}),": Use when you need better readability and chaining."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Async/Await"}),": Use for modern, clean, and maintainable asynchronous code."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["For Angular applications, ",(0,a.jsx)(n.strong,{children:"promises"})," and ",(0,a.jsx)(n.strong,{children:"async/await"})," are preferred over callbacks for handling asynchronous operations like HTTP requests, animations, or timers."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var r=s(96540);const a={},t=r.createContext(a);function i(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);